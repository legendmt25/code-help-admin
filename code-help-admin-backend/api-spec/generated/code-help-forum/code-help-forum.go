// Package codeHelpForumGen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package codeHelpForumGen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Categories defines model for Categories.
type Categories struct {
	Categories []Category `json:"categories"`
}

// Category defines model for Category.
type Category struct {
	Name string `json:"name"`
	Uid  string `json:"uid"`
}

// CategoryCreate defines model for CategoryCreate.
type CategoryCreate struct {
	Name string `json:"name"`
}

// Comment defines model for Comment.
type Comment struct {
	Content  string    `json:"content"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Replies  *struct {
		Count   int        `json:"count"`
		Replies *[]Comment `json:"replies,omitempty"`
	} `json:"replies,omitempty"`
	Uid  string `json:"uid"`
	User User   `json:"user"`
}

// CommentRequest defines model for CommentRequest.
type CommentRequest struct {
	Content string `json:"content"`
}

// Comments defines model for Comments.
type Comments struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

// Community defines model for Community.
type Community struct {
	Admin       User        `json:"admin"`
	Categories  []Category  `json:"categories"`
	Created     time.Time   `json:"created"`
	Description string      `json:"description"`
	Image       *string     `json:"image,omitempty"`
	Joined      bool        `json:"joined"`
	Moderators  []User      `json:"moderators"`
	Name        string      `json:"name"`
	Posts       []ShortPost `json:"posts"`
}

// CommunityRequest defines model for CommunityRequest.
type CommunityRequest struct {
	Categories *struct {
		Uids *[]string `json:"uids,omitempty"`
	} `json:"categories,omitempty"`
	Description string  `json:"description"`
	Image       *string `json:"image,omitempty"`
	Name        string  `json:"name"`
}

// ModeratorRequest defines model for ModeratorRequest.
type ModeratorRequest struct {
	Username string `json:"username"`
}

// Post defines model for Post.
type Post struct {
	Comments []Comment `json:"comments"`
	Content  string    `json:"content"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Title    string    `json:"title"`
	Uid      string    `json:"uid"`
	User     User      `json:"user"`
}

// PostRequest defines model for PostRequest.
type PostRequest struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// ShortCommunities defines model for ShortCommunities.
type ShortCommunities struct {
	Communities []ShortCommunity `json:"communities"`
}

// ShortCommunity defines model for ShortCommunity.
type ShortCommunity struct {
	Categories  *[]Category `json:"categories,omitempty"`
	Description string      `json:"description"`
	Image       *string     `json:"image,omitempty"`
	Name        string      `json:"name"`
}

// ShortPost defines model for ShortPost.
type ShortPost struct {
	Created time.Time `json:"created"`
	Title   string    `json:"title"`
	Uid     string    `json:"uid"`
	User    User      `json:"user"`
}

// ShortPosts defines model for ShortPosts.
type ShortPosts struct {
	Posts *[]ShortPost `json:"posts,omitempty"`
}

// User defines model for User.
type User struct {
	Username string `json:"username"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// GetCommentsForPostParams defines parameters for GetCommentsForPost.
type GetCommentsForPostParams struct {
	// Post Post uid
	Post string `form:"post" json:"post"`
}

// CommentOnPostParams defines parameters for CommentOnPost.
type CommentOnPostParams struct {
	// Post Post uid
	Post string `form:"post" json:"post"`
}

// LeaveCommunityParams defines parameters for LeaveCommunity.
type LeaveCommunityParams struct {
	// Community Community uid
	Community string `form:"community" json:"community"`
}

// JoinCommunityParams defines parameters for JoinCommunity.
type JoinCommunityParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`
}

// RemoveModeratorParams defines parameters for RemoveModerator.
type RemoveModeratorParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`

	// Username moderator to remove
	Username string `form:"username" json:"username"`
}

// GetCommunityModeratorsParams defines parameters for GetCommunityModerators.
type GetCommunityModeratorsParams struct {
	// Name Community uid
	Name string `form:"name" json:"name"`
}

// AddModeratorParams defines parameters for AddModerator.
type AddModeratorParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Community Community name
	Community *string `form:"community,omitempty" json:"community,omitempty"`
}

// CreateCommunityPostParams defines parameters for CreateCommunityPost.
type CreateCommunityPostParams struct {
	Community string `form:"community" json:"community"`
}

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryCreate

// CommentOnPostJSONRequestBody defines body for CommentOnPost for application/json ContentType.
type CommentOnPostJSONRequestBody = CommentRequest

// ReplyToCommentJSONRequestBody defines body for ReplyToComment for application/json ContentType.
type ReplyToCommentJSONRequestBody = CommentRequest

// UpdateCommentJSONRequestBody defines body for UpdateComment for application/json ContentType.
type UpdateCommentJSONRequestBody = CommentRequest

// CreateCommunityJSONRequestBody defines body for CreateCommunity for application/json ContentType.
type CreateCommunityJSONRequestBody = CommunityRequest

// AddModeratorJSONRequestBody defines body for AddModerator for application/json ContentType.
type AddModeratorJSONRequestBody = ModeratorRequest

// UpdateCommunityJSONRequestBody defines body for UpdateCommunity for application/json ContentType.
type UpdateCommunityJSONRequestBody = CommunityRequest

// CreateCommunityPostJSONRequestBody defines body for CreateCommunityPost for application/json ContentType.
type CreateCommunityPostJSONRequestBody = PostRequest

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = PostRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCategories request
	GetAllCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryWithBody request with any body
	CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentsForPost request
	GetCommentsForPost(ctx context.Context, params *GetCommentsForPostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommentOnPostWithBody request with any body
	CommentOnPostWithBody(ctx context.Context, params *CommentOnPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommentOnPost(ctx context.Context, params *CommentOnPostParams, body CommentOnPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComment request
	DeleteComment(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommentReplies request
	GetCommentReplies(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplyToCommentWithBody request with any body
	ReplyToCommentWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplyToComment(ctx context.Context, uid string, body ReplyToCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommentWithBody request with any body
	UpdateCommentWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateComment(ctx context.Context, uid string, body UpdateCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCommunities request
	GetAllCommunities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCommunityWithBody request with any body
	CreateCommunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCommunity(ctx context.Context, body CreateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LeaveCommunity request
	LeaveCommunity(ctx context.Context, params *LeaveCommunityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// JoinCommunity request
	JoinCommunity(ctx context.Context, params *JoinCommunityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveModerator request
	RemoveModerator(ctx context.Context, params *RemoveModeratorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunityModerators request
	GetCommunityModerators(ctx context.Context, params *GetCommunityModeratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddModeratorWithBody request with any body
	AddModeratorWithBody(ctx context.Context, params *AddModeratorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddModerator(ctx context.Context, params *AddModeratorParams, body AddModeratorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommunity request
	DeleteCommunity(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommunityByUid request
	GetCommunityByUid(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommunityWithBody request with any body
	UpdateCommunityWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCommunity(ctx context.Context, name string, body UpdateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPosts request
	GetPosts(ctx context.Context, params *GetPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCommunityPostWithBody request with any body
	CreateCommunityPostWithBody(ctx context.Context, params *CreateCommunityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCommunityPost(ctx context.Context, params *CreateCommunityPostParams, body CreateCommunityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePost request
	DeletePost(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPost request
	GetPost(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostWithBody request with any body
	UpdatePostWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePost(ctx context.Context, uid string, body UpdatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentsForPost(ctx context.Context, params *GetCommentsForPostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentsForPostRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentOnPostWithBody(ctx context.Context, params *CommentOnPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentOnPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommentOnPost(ctx context.Context, params *CommentOnPostParams, body CommentOnPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommentOnPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComment(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommentRequest(c.Server, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommentReplies(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommentRepliesRequest(c.Server, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplyToCommentWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplyToCommentRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplyToComment(ctx context.Context, uid string, body ReplyToCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplyToCommentRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommentWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommentRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateComment(ctx context.Context, uid string, body UpdateCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommentRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCommunities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCommunitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunity(ctx context.Context, body CreateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LeaveCommunity(ctx context.Context, params *LeaveCommunityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLeaveCommunityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) JoinCommunity(ctx context.Context, params *JoinCommunityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJoinCommunityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveModerator(ctx context.Context, params *RemoveModeratorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveModeratorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunityModerators(ctx context.Context, params *GetCommunityModeratorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunityModeratorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddModeratorWithBody(ctx context.Context, params *AddModeratorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddModeratorRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddModerator(ctx context.Context, params *AddModeratorParams, body AddModeratorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddModeratorRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommunity(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommunityRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommunityByUid(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommunityByUidRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommunityWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommunityRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommunity(ctx context.Context, name string, body UpdateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommunityRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPosts(ctx context.Context, params *GetPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunityPostWithBody(ctx context.Context, params *CreateCommunityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunityPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCommunityPost(ctx context.Context, params *CreateCommunityPostParams, body CreateCommunityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCommunityPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePost(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePostRequest(c.Server, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPost(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostRequest(c.Server, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostWithBody(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostRequestWithBody(c.Server, uid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePost(ctx context.Context, uid string, body UpdatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostRequest(c.Server, uid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCategoriesRequest generates requests for GetAllCategories
func NewGetAllCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoryRequest calls the generic CreateCategory builder with application/json body
func NewCreateCategoryRequest(server string, body CreateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCategoryRequestWithBody generates requests for CreateCategory with any type of body
func NewCreateCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/category")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCommentsForPostRequest generates requests for GetCommentsForPost
func NewGetCommentsForPostRequest(server string, params *GetCommentsForPostParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post", runtime.ParamLocationQuery, params.Post); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommentOnPostRequest calls the generic CommentOnPost builder with application/json body
func NewCommentOnPostRequest(server string, params *CommentOnPostParams, body CommentOnPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommentOnPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommentOnPostRequestWithBody generates requests for CommentOnPost with any type of body
func NewCommentOnPostRequestWithBody(server string, params *CommentOnPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post", runtime.ParamLocationQuery, params.Post); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommentRequest generates requests for DeleteComment
func NewDeleteCommentRequest(server string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommentRepliesRequest generates requests for GetCommentReplies
func NewGetCommentRepliesRequest(server string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplyToCommentRequest calls the generic ReplyToComment builder with application/json body
func NewReplyToCommentRequest(server string, uid string, body ReplyToCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplyToCommentRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewReplyToCommentRequestWithBody generates requests for ReplyToComment with any type of body
func NewReplyToCommentRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCommentRequest calls the generic UpdateComment builder with application/json body
func NewUpdateCommentRequest(server string, uid string, body UpdateCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommentRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewUpdateCommentRequestWithBody generates requests for UpdateComment with any type of body
func NewUpdateCommentRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/comment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCommunitiesRequest generates requests for GetAllCommunities
func NewGetAllCommunitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCommunityRequest calls the generic CreateCommunity builder with application/json body
func NewCreateCommunityRequest(server string, body CreateCommunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCommunityRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCommunityRequestWithBody generates requests for CreateCommunity with any type of body
func NewCreateCommunityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLeaveCommunityRequest generates requests for LeaveCommunity
func NewLeaveCommunityRequest(server string, params *LeaveCommunityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJoinCommunityRequest generates requests for JoinCommunity
func NewJoinCommunityRequest(server string, params *JoinCommunityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveModeratorRequest generates requests for RemoveModerator
func NewRemoveModeratorRequest(server string, params *RemoveModeratorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/moderator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommunityModeratorsRequest generates requests for GetCommunityModerators
func NewGetCommunityModeratorsRequest(server string, params *GetCommunityModeratorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/moderator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddModeratorRequest calls the generic AddModerator builder with application/json body
func NewAddModeratorRequest(server string, params *AddModeratorParams, body AddModeratorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddModeratorRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddModeratorRequestWithBody generates requests for AddModerator with any type of body
func NewAddModeratorRequestWithBody(server string, params *AddModeratorParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/moderator")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommunityRequest generates requests for DeleteCommunity
func NewDeleteCommunityRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommunityByUidRequest generates requests for GetCommunityByUid
func NewGetCommunityByUidRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCommunityRequest calls the generic UpdateCommunity builder with application/json body
func NewUpdateCommunityRequest(server string, name string, body UpdateCommunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommunityRequestWithBody(server, name, "application/json", bodyReader)
}

// NewUpdateCommunityRequestWithBody generates requests for UpdateCommunity with any type of body
func NewUpdateCommunityRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/community/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPostsRequest generates requests for GetPosts
func NewGetPostsRequest(server string, params *GetPostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Community != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, *params.Community); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCommunityPostRequest calls the generic CreateCommunityPost builder with application/json body
func NewCreateCommunityPostRequest(server string, params *CreateCommunityPostParams, body CreateCommunityPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCommunityPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateCommunityPostRequestWithBody generates requests for CreateCommunityPost with any type of body
func NewCreateCommunityPostRequestWithBody(server string, params *CreateCommunityPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community", runtime.ParamLocationQuery, params.Community); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePostRequest generates requests for DeletePost
func NewDeletePostRequest(server string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostRequest generates requests for GetPost
func NewGetPostRequest(server string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostRequest calls the generic UpdatePost builder with application/json body
func NewUpdatePostRequest(server string, uid string, body UpdatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePostRequestWithBody(server, uid, "application/json", bodyReader)
}

// NewUpdatePostRequestWithBody generates requests for UpdatePost with any type of body
func NewUpdatePostRequestWithBody(server string, uid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCategoriesWithResponse request
	GetAllCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCategoriesResponse, error)

	// CreateCategoryWithBodyWithResponse request with any body
	CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	// GetCommentsForPostWithResponse request
	GetCommentsForPostWithResponse(ctx context.Context, params *GetCommentsForPostParams, reqEditors ...RequestEditorFn) (*GetCommentsForPostResponse, error)

	// CommentOnPostWithBodyWithResponse request with any body
	CommentOnPostWithBodyWithResponse(ctx context.Context, params *CommentOnPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommentOnPostResponse, error)

	CommentOnPostWithResponse(ctx context.Context, params *CommentOnPostParams, body CommentOnPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CommentOnPostResponse, error)

	// DeleteCommentWithResponse request
	DeleteCommentWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*DeleteCommentResponse, error)

	// GetCommentRepliesWithResponse request
	GetCommentRepliesWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*GetCommentRepliesResponse, error)

	// ReplyToCommentWithBodyWithResponse request with any body
	ReplyToCommentWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplyToCommentResponse, error)

	ReplyToCommentWithResponse(ctx context.Context, uid string, body ReplyToCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplyToCommentResponse, error)

	// UpdateCommentWithBodyWithResponse request with any body
	UpdateCommentWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommentResponse, error)

	UpdateCommentWithResponse(ctx context.Context, uid string, body UpdateCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommentResponse, error)

	// GetAllCommunitiesWithResponse request
	GetAllCommunitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCommunitiesResponse, error)

	// CreateCommunityWithBodyWithResponse request with any body
	CreateCommunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunityResponse, error)

	CreateCommunityWithResponse(ctx context.Context, body CreateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunityResponse, error)

	// LeaveCommunityWithResponse request
	LeaveCommunityWithResponse(ctx context.Context, params *LeaveCommunityParams, reqEditors ...RequestEditorFn) (*LeaveCommunityResponse, error)

	// JoinCommunityWithResponse request
	JoinCommunityWithResponse(ctx context.Context, params *JoinCommunityParams, reqEditors ...RequestEditorFn) (*JoinCommunityResponse, error)

	// RemoveModeratorWithResponse request
	RemoveModeratorWithResponse(ctx context.Context, params *RemoveModeratorParams, reqEditors ...RequestEditorFn) (*RemoveModeratorResponse, error)

	// GetCommunityModeratorsWithResponse request
	GetCommunityModeratorsWithResponse(ctx context.Context, params *GetCommunityModeratorsParams, reqEditors ...RequestEditorFn) (*GetCommunityModeratorsResponse, error)

	// AddModeratorWithBodyWithResponse request with any body
	AddModeratorWithBodyWithResponse(ctx context.Context, params *AddModeratorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddModeratorResponse, error)

	AddModeratorWithResponse(ctx context.Context, params *AddModeratorParams, body AddModeratorJSONRequestBody, reqEditors ...RequestEditorFn) (*AddModeratorResponse, error)

	// DeleteCommunityWithResponse request
	DeleteCommunityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCommunityResponse, error)

	// GetCommunityByUidWithResponse request
	GetCommunityByUidWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCommunityByUidResponse, error)

	// UpdateCommunityWithBodyWithResponse request with any body
	UpdateCommunityWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommunityResponse, error)

	UpdateCommunityWithResponse(ctx context.Context, name string, body UpdateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommunityResponse, error)

	// GetPostsWithResponse request
	GetPostsWithResponse(ctx context.Context, params *GetPostsParams, reqEditors ...RequestEditorFn) (*GetPostsResponse, error)

	// CreateCommunityPostWithBodyWithResponse request with any body
	CreateCommunityPostWithBodyWithResponse(ctx context.Context, params *CreateCommunityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunityPostResponse, error)

	CreateCommunityPostWithResponse(ctx context.Context, params *CreateCommunityPostParams, body CreateCommunityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunityPostResponse, error)

	// DeletePostWithResponse request
	DeletePostWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*DeletePostResponse, error)

	// GetPostWithResponse request
	GetPostWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*GetPostResponse, error)

	// UpdatePostWithBodyWithResponse request with any body
	UpdatePostWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostResponse, error)

	UpdatePostWithResponse(ctx context.Context, uid string, body UpdatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostResponse, error)
}

type GetAllCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Categories
}

// Status returns HTTPResponse.Status
func (r GetAllCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentsForPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comments
}

// Status returns HTTPResponse.Status
func (r GetCommentsForPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentsForPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CommentOnPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
}

// Status returns HTTPResponse.Status
func (r CommentOnPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommentOnPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommentRepliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comments
}

// Status returns HTTPResponse.Status
func (r GetCommentRepliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommentRepliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplyToCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
}

// Status returns HTTPResponse.Status
func (r ReplyToCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplyToCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
}

// Status returns HTTPResponse.Status
func (r UpdateCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCommunitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShortCommunities
}

// Status returns HTTPResponse.Status
func (r GetAllCommunitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCommunitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r CreateCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LeaveCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LeaveCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LeaveCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JoinCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r JoinCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JoinCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveModeratorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveModeratorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveModeratorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunityModeratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Users
}

// Status returns HTTPResponse.Status
func (r GetCommunityModeratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunityModeratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddModeratorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddModeratorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddModeratorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommunityByUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r GetCommunityByUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommunityByUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r UpdateCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShortPosts
}

// Status returns HTTPResponse.Status
func (r GetPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCommunityPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
}

// Status returns HTTPResponse.Status
func (r CreateCommunityPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCommunityPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
}

// Status returns HTTPResponse.Status
func (r GetPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
}

// Status returns HTTPResponse.Status
func (r UpdatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCategoriesWithResponse request returning *GetAllCategoriesResponse
func (c *ClientWithResponses) GetAllCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCategoriesResponse, error) {
	rsp, err := c.GetAllCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCategoriesResponse(rsp)
}

// CreateCategoryWithBodyWithResponse request with arbitrary body returning *CreateCategoryResponse
func (c *ClientWithResponses) CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

// GetCommentsForPostWithResponse request returning *GetCommentsForPostResponse
func (c *ClientWithResponses) GetCommentsForPostWithResponse(ctx context.Context, params *GetCommentsForPostParams, reqEditors ...RequestEditorFn) (*GetCommentsForPostResponse, error) {
	rsp, err := c.GetCommentsForPost(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentsForPostResponse(rsp)
}

// CommentOnPostWithBodyWithResponse request with arbitrary body returning *CommentOnPostResponse
func (c *ClientWithResponses) CommentOnPostWithBodyWithResponse(ctx context.Context, params *CommentOnPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CommentOnPostResponse, error) {
	rsp, err := c.CommentOnPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentOnPostResponse(rsp)
}

func (c *ClientWithResponses) CommentOnPostWithResponse(ctx context.Context, params *CommentOnPostParams, body CommentOnPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CommentOnPostResponse, error) {
	rsp, err := c.CommentOnPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCommentOnPostResponse(rsp)
}

// DeleteCommentWithResponse request returning *DeleteCommentResponse
func (c *ClientWithResponses) DeleteCommentWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*DeleteCommentResponse, error) {
	rsp, err := c.DeleteComment(ctx, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommentResponse(rsp)
}

// GetCommentRepliesWithResponse request returning *GetCommentRepliesResponse
func (c *ClientWithResponses) GetCommentRepliesWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*GetCommentRepliesResponse, error) {
	rsp, err := c.GetCommentReplies(ctx, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommentRepliesResponse(rsp)
}

// ReplyToCommentWithBodyWithResponse request with arbitrary body returning *ReplyToCommentResponse
func (c *ClientWithResponses) ReplyToCommentWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplyToCommentResponse, error) {
	rsp, err := c.ReplyToCommentWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplyToCommentResponse(rsp)
}

func (c *ClientWithResponses) ReplyToCommentWithResponse(ctx context.Context, uid string, body ReplyToCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplyToCommentResponse, error) {
	rsp, err := c.ReplyToComment(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplyToCommentResponse(rsp)
}

// UpdateCommentWithBodyWithResponse request with arbitrary body returning *UpdateCommentResponse
func (c *ClientWithResponses) UpdateCommentWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommentResponse, error) {
	rsp, err := c.UpdateCommentWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommentResponse(rsp)
}

func (c *ClientWithResponses) UpdateCommentWithResponse(ctx context.Context, uid string, body UpdateCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommentResponse, error) {
	rsp, err := c.UpdateComment(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommentResponse(rsp)
}

// GetAllCommunitiesWithResponse request returning *GetAllCommunitiesResponse
func (c *ClientWithResponses) GetAllCommunitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCommunitiesResponse, error) {
	rsp, err := c.GetAllCommunities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCommunitiesResponse(rsp)
}

// CreateCommunityWithBodyWithResponse request with arbitrary body returning *CreateCommunityResponse
func (c *ClientWithResponses) CreateCommunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunityResponse, error) {
	rsp, err := c.CreateCommunityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunityResponse(rsp)
}

func (c *ClientWithResponses) CreateCommunityWithResponse(ctx context.Context, body CreateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunityResponse, error) {
	rsp, err := c.CreateCommunity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunityResponse(rsp)
}

// LeaveCommunityWithResponse request returning *LeaveCommunityResponse
func (c *ClientWithResponses) LeaveCommunityWithResponse(ctx context.Context, params *LeaveCommunityParams, reqEditors ...RequestEditorFn) (*LeaveCommunityResponse, error) {
	rsp, err := c.LeaveCommunity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLeaveCommunityResponse(rsp)
}

// JoinCommunityWithResponse request returning *JoinCommunityResponse
func (c *ClientWithResponses) JoinCommunityWithResponse(ctx context.Context, params *JoinCommunityParams, reqEditors ...RequestEditorFn) (*JoinCommunityResponse, error) {
	rsp, err := c.JoinCommunity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJoinCommunityResponse(rsp)
}

// RemoveModeratorWithResponse request returning *RemoveModeratorResponse
func (c *ClientWithResponses) RemoveModeratorWithResponse(ctx context.Context, params *RemoveModeratorParams, reqEditors ...RequestEditorFn) (*RemoveModeratorResponse, error) {
	rsp, err := c.RemoveModerator(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveModeratorResponse(rsp)
}

// GetCommunityModeratorsWithResponse request returning *GetCommunityModeratorsResponse
func (c *ClientWithResponses) GetCommunityModeratorsWithResponse(ctx context.Context, params *GetCommunityModeratorsParams, reqEditors ...RequestEditorFn) (*GetCommunityModeratorsResponse, error) {
	rsp, err := c.GetCommunityModerators(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunityModeratorsResponse(rsp)
}

// AddModeratorWithBodyWithResponse request with arbitrary body returning *AddModeratorResponse
func (c *ClientWithResponses) AddModeratorWithBodyWithResponse(ctx context.Context, params *AddModeratorParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddModeratorResponse, error) {
	rsp, err := c.AddModeratorWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddModeratorResponse(rsp)
}

func (c *ClientWithResponses) AddModeratorWithResponse(ctx context.Context, params *AddModeratorParams, body AddModeratorJSONRequestBody, reqEditors ...RequestEditorFn) (*AddModeratorResponse, error) {
	rsp, err := c.AddModerator(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddModeratorResponse(rsp)
}

// DeleteCommunityWithResponse request returning *DeleteCommunityResponse
func (c *ClientWithResponses) DeleteCommunityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteCommunityResponse, error) {
	rsp, err := c.DeleteCommunity(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommunityResponse(rsp)
}

// GetCommunityByUidWithResponse request returning *GetCommunityByUidResponse
func (c *ClientWithResponses) GetCommunityByUidWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCommunityByUidResponse, error) {
	rsp, err := c.GetCommunityByUid(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommunityByUidResponse(rsp)
}

// UpdateCommunityWithBodyWithResponse request with arbitrary body returning *UpdateCommunityResponse
func (c *ClientWithResponses) UpdateCommunityWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommunityResponse, error) {
	rsp, err := c.UpdateCommunityWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommunityResponse(rsp)
}

func (c *ClientWithResponses) UpdateCommunityWithResponse(ctx context.Context, name string, body UpdateCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommunityResponse, error) {
	rsp, err := c.UpdateCommunity(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommunityResponse(rsp)
}

// GetPostsWithResponse request returning *GetPostsResponse
func (c *ClientWithResponses) GetPostsWithResponse(ctx context.Context, params *GetPostsParams, reqEditors ...RequestEditorFn) (*GetPostsResponse, error) {
	rsp, err := c.GetPosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostsResponse(rsp)
}

// CreateCommunityPostWithBodyWithResponse request with arbitrary body returning *CreateCommunityPostResponse
func (c *ClientWithResponses) CreateCommunityPostWithBodyWithResponse(ctx context.Context, params *CreateCommunityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCommunityPostResponse, error) {
	rsp, err := c.CreateCommunityPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunityPostResponse(rsp)
}

func (c *ClientWithResponses) CreateCommunityPostWithResponse(ctx context.Context, params *CreateCommunityPostParams, body CreateCommunityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCommunityPostResponse, error) {
	rsp, err := c.CreateCommunityPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCommunityPostResponse(rsp)
}

// DeletePostWithResponse request returning *DeletePostResponse
func (c *ClientWithResponses) DeletePostWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*DeletePostResponse, error) {
	rsp, err := c.DeletePost(ctx, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePostResponse(rsp)
}

// GetPostWithResponse request returning *GetPostResponse
func (c *ClientWithResponses) GetPostWithResponse(ctx context.Context, uid string, reqEditors ...RequestEditorFn) (*GetPostResponse, error) {
	rsp, err := c.GetPost(ctx, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostResponse(rsp)
}

// UpdatePostWithBodyWithResponse request with arbitrary body returning *UpdatePostResponse
func (c *ClientWithResponses) UpdatePostWithBodyWithResponse(ctx context.Context, uid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostResponse, error) {
	rsp, err := c.UpdatePostWithBody(ctx, uid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostResponse(rsp)
}

func (c *ClientWithResponses) UpdatePostWithResponse(ctx context.Context, uid string, body UpdatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostResponse, error) {
	rsp, err := c.UpdatePost(ctx, uid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostResponse(rsp)
}

// ParseGetAllCategoriesResponse parses an HTTP response from a GetAllCategoriesWithResponse call
func ParseGetAllCategoriesResponse(rsp *http.Response) (*GetAllCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Categories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoryResponse parses an HTTP response from a CreateCategoryWithResponse call
func ParseCreateCategoryResponse(rsp *http.Response) (*CreateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCommentsForPostResponse parses an HTTP response from a GetCommentsForPostWithResponse call
func ParseGetCommentsForPostResponse(rsp *http.Response) (*GetCommentsForPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentsForPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommentOnPostResponse parses an HTTP response from a CommentOnPostWithResponse call
func ParseCommentOnPostResponse(rsp *http.Response) (*CommentOnPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CommentOnPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCommentResponse parses an HTTP response from a DeleteCommentWithResponse call
func ParseDeleteCommentResponse(rsp *http.Response) (*DeleteCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCommentRepliesResponse parses an HTTP response from a GetCommentRepliesWithResponse call
func ParseGetCommentRepliesResponse(rsp *http.Response) (*GetCommentRepliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommentRepliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplyToCommentResponse parses an HTTP response from a ReplyToCommentWithResponse call
func ParseReplyToCommentResponse(rsp *http.Response) (*ReplyToCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplyToCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCommentResponse parses an HTTP response from a UpdateCommentWithResponse call
func ParseUpdateCommentResponse(rsp *http.Response) (*UpdateCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCommunitiesResponse parses an HTTP response from a GetAllCommunitiesWithResponse call
func ParseGetAllCommunitiesResponse(rsp *http.Response) (*GetAllCommunitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCommunitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShortCommunities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCommunityResponse parses an HTTP response from a CreateCommunityWithResponse call
func ParseCreateCommunityResponse(rsp *http.Response) (*CreateCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLeaveCommunityResponse parses an HTTP response from a LeaveCommunityWithResponse call
func ParseLeaveCommunityResponse(rsp *http.Response) (*LeaveCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LeaveCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJoinCommunityResponse parses an HTTP response from a JoinCommunityWithResponse call
func ParseJoinCommunityResponse(rsp *http.Response) (*JoinCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JoinCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveModeratorResponse parses an HTTP response from a RemoveModeratorWithResponse call
func ParseRemoveModeratorResponse(rsp *http.Response) (*RemoveModeratorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveModeratorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCommunityModeratorsResponse parses an HTTP response from a GetCommunityModeratorsWithResponse call
func ParseGetCommunityModeratorsResponse(rsp *http.Response) (*GetCommunityModeratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunityModeratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Users
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddModeratorResponse parses an HTTP response from a AddModeratorWithResponse call
func ParseAddModeratorResponse(rsp *http.Response) (*AddModeratorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddModeratorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCommunityResponse parses an HTTP response from a DeleteCommunityWithResponse call
func ParseDeleteCommunityResponse(rsp *http.Response) (*DeleteCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCommunityByUidResponse parses an HTTP response from a GetCommunityByUidWithResponse call
func ParseGetCommunityByUidResponse(rsp *http.Response) (*GetCommunityByUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommunityByUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCommunityResponse parses an HTTP response from a UpdateCommunityWithResponse call
func ParseUpdateCommunityResponse(rsp *http.Response) (*UpdateCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostsResponse parses an HTTP response from a GetPostsWithResponse call
func ParseGetPostsResponse(rsp *http.Response) (*GetPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShortPosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCommunityPostResponse parses an HTTP response from a CreateCommunityPostWithResponse call
func ParseCreateCommunityPostResponse(rsp *http.Response) (*CreateCommunityPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCommunityPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePostResponse parses an HTTP response from a DeletePostWithResponse call
func ParseDeletePostResponse(rsp *http.Response) (*DeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostResponse parses an HTTP response from a GetPostWithResponse call
func ParseGetPostResponse(rsp *http.Response) (*GetPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePostResponse parses an HTTP response from a UpdatePostWithResponse call
func ParseUpdatePostResponse(rsp *http.Response) (*UpdatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaS2/jNhD+KwTboxo53T35tpsixbZNE6QNeghyYKSxzUASFYpKawT67wUfepOy/FDk",
	"Aj3tJnzMzDffvKi844DFKUsgERlevuMs2EBM1H+viIA14xTUTylnKXBhfgpaa1RArP7zPYcVXuLv/PpS",
	"39zom+u2uPCw2KaAl5hwTra4KDzM4TWnHEK8fGze/VRtZc8vEAh5trqnp1RCYpD/miOZ4DRZyyM5DS2/",
	"74iVmzx9x5DYKw5EwGjhHSHu61kcQyIsSLNEmIWeXYHSRdm2YjwmAi9xSAT8IGgM2OsfiFlIV3SfExzS",
	"yM4Alre0oomANfDOmXHMMLbvJIYSaUPP7mAP5xnwXdIf5B47GUrsa6QbEJrbB5x5D685ZHv5tGex3jgg",
	"xOqaeuVoB1jl5gkVKgBJFN2u8PJx+P4/NoyL+lzhdTUmYUyTcY7yTpt7DgiiF0YTaPLtmbEISGICDDgR",
	"jI/XrTSrq1fKsj1cqCC+Y9nuKNJYt2Ds8Lu0oNShMrlPw6cmIdx8H6gkOQ3bVvbw3k3JELKA01RQllhv",
	"oDFZ2yvDHlm7LcYWkTcldE4gZMYYJ7LaaROk/Lxf9BlqTJcqvMFKtW/hceTBVvqtdLfQ0gHaARnZw4KK",
	"CMbn6vKATYdWInSU1dbi+NhvptddZbQWsVPJ7cS939kEbx0lfYP3rRAuxkzWqGiBzTTu7E0qOy3kO2XJ",
	"6Ql+MCZOkhHl5Zn99mMrsUUNW9zIfTRZMSmkRWl8zXgeI5KmEQ2I/B0iKa2cZlnHHn4DnunTi4vLi4XU",
	"iqWQyINL/OlicXEpqzMRG2WUHzRmojWIvg4/g0AkilCr6EuklMBvod7yJYqumhs4ZClLMo3lj4tFJ1M2",
	"VPZfMh2+GsuR+UBKUcC1lb39VTOIrLPGPLjFT6Yr6punhzJEUAJ/o2p/10K966pe5rocfGXh9tSmlXOi",
	"xbxyB1LRKvnwLBVo0kzwHAo7/mOhKjzsB/VQOcwKU0nRinFEkMLYQo9y4rhm/E5vSQknMQgVZI/d2+Ue",
	"pPOTbO7xaw4KdR3u2EhpG+01UO6mg6cpCVn2EiPoaEB1s/EvThUZzU4kI94OqhF7m8yG5wQB0B5+bQFg",
	"cDHS96L/KVV0OdvDn22x9pWEqLbKRohGzPnvOQ0LfUkE+sGo7fuf1O9LVXb4voSs4X6Z/Wvv64Wjg+mE",
	"YHijcg4qH4vc+ea+2nEWEJ1fvpEAbZFgdcrpoam2/MlmZdtHpJoZs4bLZbnox/5DKueH/70xZQ7/tPjc",
	"D5XfmUA35RPC8Ym+mpCdqa4xbKPnLWo42tF/N4bzCdHrPUSMI7W2d2wfXh1wNOKN9an42HqXLNqz3Ed0",
	"GeZFZi9wW+TyY4if9eBcNxLtq34D8la2m3a81Y4m3Dvzjdo40GwGHd/N33Q0qElEsOkf/oXRZBAlueEA",
	"kMz70n8LpQ7HyofroX71HmL2BtUb94wAeV1Zlf6yCeJKT+xh+CeNWAjlfTb51ZvSJP5xMtRZLeqPL2YU",
	"d7PV9Mdq8ab1zebY2D4VICdJovphb+/qZE8BX8LQ1KYWY8QGevB+CcNzoPpErVrvS5W7WTuwbL1Ls4uh",
	"sqXnXwn+AMvrIfmIrNzuls8l3q9pItmYpRDQFQ1qEGSfqILTHfBftw9qx0gwvoXTQjFru1SNWO0TesQa",
	"oFY9g81MrY/qfJ2VQCM162vcoX1yOYa45y/ggtAElX/J0IupO7Nw2gw/Twg1vu3thlJBN2KUk8uIJhkN",
	"h4eMzlBnf9E++8rY/CsBC4bqDX62SNEfW8d6towP21O0tRQ7PlLo1UO+UJznE3VFfPf7NMposo7A+SXs",
	"bMCYgVa76q1SCMnOmooIEFu5eKVPzATlPJmjXWrPJndM8VhaJqHCwxnwt9KxOY/wEm+ESJe+H7GARBuW",
	"ieWnxeLSJyn13y5x8VT8GwAA//9kPjI8li4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
