// Package codeHelpAdminCoreGen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package codeHelpAdminCoreGen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Authorization_JWTScopes = "Authorization_JWT.Scopes"
)

// Defines values for ContestStatus.
const (
	CLOSED  ContestStatus = "CLOSED"
	OPEN    ContestStatus = "OPEN"
	STARTED ContestStatus = "STARTED"
)

// Defines values for Difficulty.
const (
	EASY   Difficulty = "EASY"
	HARD   Difficulty = "HARD"
	MEDIUM Difficulty = "MEDIUM"
)

// Category defines model for Category.
type Category struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// CategoryRequest defines model for CategoryRequest.
type CategoryRequest struct {
	Name string `json:"name"`
}

// CategoryResponse defines model for CategoryResponse.
type CategoryResponse struct {
	Categories []Category `json:"categories"`
}

// Code defines model for Code.
type Code = string

// Contest defines model for Contest.
type Contest struct {
	Duration string        `json:"duration"`
	Id       int64         `json:"id"`
	Name     string        `json:"name"`
	StartsOn Date          `json:"startsOn"`
	Status   ContestStatus `json:"status"`
}

// ContestDetail defines model for ContestDetail.
type ContestDetail struct {
	Duration string           `json:"duration"`
	Id       int64            `json:"id"`
	Name     string           `json:"name"`
	Problems []ContestProblem `json:"problems"`
	StartsOn Date             `json:"startsOn"`
	Status   ContestStatus    `json:"status"`
}

// ContestEditRequest defines model for ContestEditRequest.
type ContestEditRequest struct {
	Duration string `json:"duration"`
	Name     string `json:"name"`
	Problems *[]struct {
		ContestProblemId *int64 `json:"contestProblemId,omitempty"`
		Score            *int   `json:"score,omitempty"`
	} `json:"problems,omitempty"`
	StartsOn Date           `json:"startsOn"`
	Status   *ContestStatus `json:"status,omitempty"`
}

// ContestProblem defines model for ContestProblem.
type ContestProblem struct {
	Category         *Category  `json:"category,omitempty"`
	ContestProblemId int64      `json:"contestProblemId"`
	Difficulty       Difficulty `json:"difficulty"`
	Id               int64      `json:"id"`
	Score            int        `json:"score"`
	Title            string     `json:"title"`
}

// ContestRequest defines model for ContestRequest.
type ContestRequest struct {
	Duration string         `json:"duration"`
	Name     string         `json:"name"`
	StartsOn Date           `json:"startsOn"`
	Status   *ContestStatus `json:"status,omitempty"`
}

// ContestResponse defines model for ContestResponse.
type ContestResponse struct {
	Contests []Contest `json:"contests"`
}

// ContestStatus defines model for ContestStatus.
type ContestStatus string

// Date defines model for Date.
type Date = openapi_types.Date

// Difficulty defines model for Difficulty.
type Difficulty string

// File defines model for File.
type File = openapi_types.File

// Problem defines model for Problem.
type Problem struct {
	Category   *Category  `json:"category,omitempty"`
	Difficulty Difficulty `json:"difficulty"`
	Id         int64      `json:"id"`
	Title      string     `json:"title"`
}

// ProblemDetail defines model for ProblemDetail.
type ProblemDetail struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Id          int64      `json:"id"`
	Markdown    string     `json:"markdown"`
	RunnerCode  Code       `json:"runnerCode"`
	StarterCode Code       `json:"starterCode"`
	TestCases   []struct {
		Id  *int64    `json:"id,omitempty"`
		In  *TestCase `json:"in,omitempty"`
		Out *TestCase `json:"out,omitempty"`
	} `json:"testCases"`
	Title string `json:"title"`
}

// ProblemRequest defines model for ProblemRequest.
type ProblemRequest struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Markdown    string     `json:"markdown"`
	RunnerCode  File       `json:"runnerCode"`
	StarterCode File       `json:"starterCode"`
	TestCases   []File     `json:"testCases"`
	Title       string     `json:"title"`
}

// ProblemResponse defines model for ProblemResponse.
type ProblemResponse struct {
	Problems []Problem `json:"problems"`
}

// TestCase defines model for TestCase.
type TestCase = string

// CategoryId defines model for CategoryId.
type CategoryId = int64

// ContestId defines model for ContestId.
type ContestId = int64

// ProblemId defines model for ProblemId.
type ProblemId = int64

// CreateProblemParams defines parameters for CreateProblem.
type CreateProblemParams struct {
	ContestId *int64 `form:"contestId,omitempty" json:"contestId,omitempty"`
}

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryRequest

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryRequest

// CreateContestJSONRequestBody defines body for CreateContest for application/json ContentType.
type CreateContestJSONRequestBody = ContestRequest

// UpdateContestJSONRequestBody defines body for UpdateContest for application/json ContentType.
type UpdateContestJSONRequestBody = ContestEditRequest

// CreateProblemMultipartRequestBody defines body for CreateProblem for multipart/form-data ContentType.
type CreateProblemMultipartRequestBody = ProblemRequest

// UpdateProblemMultipartRequestBody defines body for UpdateProblem for multipart/form-data ContentType.
type UpdateProblemMultipartRequestBody = ProblemRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCategories request
	GetAllCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryWithBody request with any body
	CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategory request
	DeleteCategory(ctx context.Context, id CategoryId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCategoryWithBody request with any body
	UpdateCategoryWithBody(ctx context.Context, id CategoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCategory(ctx context.Context, id CategoryId, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllContests request
	GetAllContests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContestWithBody request with any body
	CreateContestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContest(ctx context.Context, body CreateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContest request
	DeleteContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContest request
	GetContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContestWithBody request with any body
	UpdateContestWithBody(ctx context.Context, id ContestId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContest(ctx context.Context, id ContestId, body UpdateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseContest request
	CloseContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartContest request
	StartContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllProblems request
	GetAllProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProblemWithBody request with any body
	CreateProblemWithBody(ctx context.Context, params *CreateProblemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProblem request
	DeleteProblem(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProblem request
	GetProblem(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProblemWithBody request with any body
	UpdateProblemWithBody(ctx context.Context, id ProblemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategory(ctx context.Context, id CategoryId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCategoryWithBody(ctx context.Context, id CategoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCategoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCategory(ctx context.Context, id CategoryId, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCategoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllContests(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllContestsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContest(ctx context.Context, body CreateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContestWithBody(ctx context.Context, id ContestId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContestRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContest(ctx context.Context, id ContestId, body UpdateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContestRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartContest(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllProblemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProblemWithBody(ctx context.Context, params *CreateProblemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProblemRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProblem(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProblemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProblem(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProblemWithBody(ctx context.Context, id ProblemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProblemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCategoriesRequest generates requests for GetAllCategories
func NewGetAllCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoryRequest calls the generic CreateCategory builder with application/json body
func NewCreateCategoryRequest(server string, body CreateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCategoryRequestWithBody generates requests for CreateCategory with any type of body
func NewCreateCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryRequest generates requests for DeleteCategory
func NewDeleteCategoryRequest(server string, id CategoryId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCategoryRequest calls the generic UpdateCategory builder with application/json body
func NewUpdateCategoryRequest(server string, id CategoryId, body UpdateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCategoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateCategoryRequestWithBody generates requests for UpdateCategory with any type of body
func NewUpdateCategoryRequestWithBody(server string, id CategoryId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllContestsRequest generates requests for GetAllContests
func NewGetAllContestsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContestRequest calls the generic CreateContest builder with application/json body
func NewCreateContestRequest(server string, body CreateContestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContestRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContestRequestWithBody generates requests for CreateContest with any type of body
func NewCreateContestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestRequest generates requests for DeleteContest
func NewDeleteContestRequest(server string, id ContestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestRequest generates requests for GetContest
func NewGetContestRequest(server string, id ContestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContestRequest calls the generic UpdateContest builder with application/json body
func NewUpdateContestRequest(server string, id ContestId, body UpdateContestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContestRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateContestRequestWithBody generates requests for UpdateContest with any type of body
func NewUpdateContestRequestWithBody(server string, id ContestId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloseContestRequest generates requests for CloseContest
func NewCloseContestRequest(server string, id ContestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests/%s/close", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartContestRequest generates requests for StartContest
func NewStartContestRequest(server string, id ContestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/contests/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllProblemsRequest generates requests for GetAllProblems
func NewGetAllProblemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProblemRequestWithBody generates requests for CreateProblem with any type of body
func NewCreateProblemRequestWithBody(server string, params *CreateProblemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContestId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contestId", runtime.ParamLocationQuery, *params.ContestId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProblemRequest generates requests for DeleteProblem
func NewDeleteProblemRequest(server string, id ProblemId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProblemRequest generates requests for GetProblem
func NewGetProblemRequest(server string, id ProblemId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProblemRequestWithBody generates requests for UpdateProblem with any type of body
func NewUpdateProblemRequestWithBody(server string, id ProblemId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCategoriesWithResponse request
	GetAllCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCategoriesResponse, error)

	// CreateCategoryWithBodyWithResponse request with any body
	CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	// DeleteCategoryWithResponse request
	DeleteCategoryWithResponse(ctx context.Context, id CategoryId, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error)

	// UpdateCategoryWithBodyWithResponse request with any body
	UpdateCategoryWithBodyWithResponse(ctx context.Context, id CategoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error)

	UpdateCategoryWithResponse(ctx context.Context, id CategoryId, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error)

	// GetAllContestsWithResponse request
	GetAllContestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllContestsResponse, error)

	// CreateContestWithBodyWithResponse request with any body
	CreateContestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestResponse, error)

	CreateContestWithResponse(ctx context.Context, body CreateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContestResponse, error)

	// DeleteContestWithResponse request
	DeleteContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*DeleteContestResponse, error)

	// GetContestWithResponse request
	GetContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*GetContestResponse, error)

	// UpdateContestWithBodyWithResponse request with any body
	UpdateContestWithBodyWithResponse(ctx context.Context, id ContestId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContestResponse, error)

	UpdateContestWithResponse(ctx context.Context, id ContestId, body UpdateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContestResponse, error)

	// CloseContestWithResponse request
	CloseContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*CloseContestResponse, error)

	// StartContestWithResponse request
	StartContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*StartContestResponse, error)

	// GetAllProblemsWithResponse request
	GetAllProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllProblemsResponse, error)

	// CreateProblemWithBodyWithResponse request with any body
	CreateProblemWithBodyWithResponse(ctx context.Context, params *CreateProblemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProblemResponse, error)

	// DeleteProblemWithResponse request
	DeleteProblemWithResponse(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*DeleteProblemResponse, error)

	// GetProblemWithResponse request
	GetProblemWithResponse(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*GetProblemResponse, error)

	// UpdateProblemWithBodyWithResponse request with any body
	UpdateProblemWithBodyWithResponse(ctx context.Context, id ProblemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProblemResponse, error)
}

type GetAllCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetAllCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllContestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestResponse
}

// Status returns HTTPResponse.Status
func (r GetAllContestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllContestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestDetail
}

// Status returns HTTPResponse.Status
func (r GetContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllProblemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetAllProblemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllProblemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
}

// Status returns HTTPResponse.Status
func (r CreateProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r GetProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemDetail
}

// Status returns HTTPResponse.Status
func (r UpdateProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCategoriesWithResponse request returning *GetAllCategoriesResponse
func (c *ClientWithResponses) GetAllCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCategoriesResponse, error) {
	rsp, err := c.GetAllCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCategoriesResponse(rsp)
}

// CreateCategoryWithBodyWithResponse request with arbitrary body returning *CreateCategoryResponse
func (c *ClientWithResponses) CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

// DeleteCategoryWithResponse request returning *DeleteCategoryResponse
func (c *ClientWithResponses) DeleteCategoryWithResponse(ctx context.Context, id CategoryId, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error) {
	rsp, err := c.DeleteCategory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryResponse(rsp)
}

// UpdateCategoryWithBodyWithResponse request with arbitrary body returning *UpdateCategoryResponse
func (c *ClientWithResponses) UpdateCategoryWithBodyWithResponse(ctx context.Context, id CategoryId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error) {
	rsp, err := c.UpdateCategoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCategoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateCategoryWithResponse(ctx context.Context, id CategoryId, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error) {
	rsp, err := c.UpdateCategory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCategoryResponse(rsp)
}

// GetAllContestsWithResponse request returning *GetAllContestsResponse
func (c *ClientWithResponses) GetAllContestsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllContestsResponse, error) {
	rsp, err := c.GetAllContests(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllContestsResponse(rsp)
}

// CreateContestWithBodyWithResponse request with arbitrary body returning *CreateContestResponse
func (c *ClientWithResponses) CreateContestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestResponse, error) {
	rsp, err := c.CreateContestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContestResponse(rsp)
}

func (c *ClientWithResponses) CreateContestWithResponse(ctx context.Context, body CreateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContestResponse, error) {
	rsp, err := c.CreateContest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContestResponse(rsp)
}

// DeleteContestWithResponse request returning *DeleteContestResponse
func (c *ClientWithResponses) DeleteContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*DeleteContestResponse, error) {
	rsp, err := c.DeleteContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestResponse(rsp)
}

// GetContestWithResponse request returning *GetContestResponse
func (c *ClientWithResponses) GetContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*GetContestResponse, error) {
	rsp, err := c.GetContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestResponse(rsp)
}

// UpdateContestWithBodyWithResponse request with arbitrary body returning *UpdateContestResponse
func (c *ClientWithResponses) UpdateContestWithBodyWithResponse(ctx context.Context, id ContestId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContestResponse, error) {
	rsp, err := c.UpdateContestWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContestResponse(rsp)
}

func (c *ClientWithResponses) UpdateContestWithResponse(ctx context.Context, id ContestId, body UpdateContestJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContestResponse, error) {
	rsp, err := c.UpdateContest(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContestResponse(rsp)
}

// CloseContestWithResponse request returning *CloseContestResponse
func (c *ClientWithResponses) CloseContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*CloseContestResponse, error) {
	rsp, err := c.CloseContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseContestResponse(rsp)
}

// StartContestWithResponse request returning *StartContestResponse
func (c *ClientWithResponses) StartContestWithResponse(ctx context.Context, id ContestId, reqEditors ...RequestEditorFn) (*StartContestResponse, error) {
	rsp, err := c.StartContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartContestResponse(rsp)
}

// GetAllProblemsWithResponse request returning *GetAllProblemsResponse
func (c *ClientWithResponses) GetAllProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllProblemsResponse, error) {
	rsp, err := c.GetAllProblems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllProblemsResponse(rsp)
}

// CreateProblemWithBodyWithResponse request with arbitrary body returning *CreateProblemResponse
func (c *ClientWithResponses) CreateProblemWithBodyWithResponse(ctx context.Context, params *CreateProblemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProblemResponse, error) {
	rsp, err := c.CreateProblemWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProblemResponse(rsp)
}

// DeleteProblemWithResponse request returning *DeleteProblemResponse
func (c *ClientWithResponses) DeleteProblemWithResponse(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*DeleteProblemResponse, error) {
	rsp, err := c.DeleteProblem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProblemResponse(rsp)
}

// GetProblemWithResponse request returning *GetProblemResponse
func (c *ClientWithResponses) GetProblemWithResponse(ctx context.Context, id ProblemId, reqEditors ...RequestEditorFn) (*GetProblemResponse, error) {
	rsp, err := c.GetProblem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProblemResponse(rsp)
}

// UpdateProblemWithBodyWithResponse request with arbitrary body returning *UpdateProblemResponse
func (c *ClientWithResponses) UpdateProblemWithBodyWithResponse(ctx context.Context, id ProblemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProblemResponse, error) {
	rsp, err := c.UpdateProblemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProblemResponse(rsp)
}

// ParseGetAllCategoriesResponse parses an HTTP response from a GetAllCategoriesWithResponse call
func ParseGetAllCategoriesResponse(rsp *http.Response) (*GetAllCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoryResponse parses an HTTP response from a CreateCategoryWithResponse call
func ParseCreateCategoryResponse(rsp *http.Response) (*CreateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCategoryResponse parses an HTTP response from a DeleteCategoryWithResponse call
func ParseDeleteCategoryResponse(rsp *http.Response) (*DeleteCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateCategoryResponse parses an HTTP response from a UpdateCategoryWithResponse call
func ParseUpdateCategoryResponse(rsp *http.Response) (*UpdateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllContestsResponse parses an HTTP response from a GetAllContestsWithResponse call
func ParseGetAllContestsResponse(rsp *http.Response) (*GetAllContestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllContestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContestResponse parses an HTTP response from a CreateContestWithResponse call
func ParseCreateContestResponse(rsp *http.Response) (*CreateContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContestResponse parses an HTTP response from a DeleteContestWithResponse call
func ParseDeleteContestResponse(rsp *http.Response) (*DeleteContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestResponse parses an HTTP response from a GetContestWithResponse call
func ParseGetContestResponse(rsp *http.Response) (*GetContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContestResponse parses an HTTP response from a UpdateContestWithResponse call
func ParseUpdateContestResponse(rsp *http.Response) (*UpdateContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCloseContestResponse parses an HTTP response from a CloseContestWithResponse call
func ParseCloseContestResponse(rsp *http.Response) (*CloseContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartContestResponse parses an HTTP response from a StartContestWithResponse call
func ParseStartContestResponse(rsp *http.Response) (*StartContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllProblemsResponse parses an HTTP response from a GetAllProblemsWithResponse call
func ParseGetAllProblemsResponse(rsp *http.Response) (*GetAllProblemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllProblemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProblemResponse parses an HTTP response from a CreateProblemWithResponse call
func ParseCreateProblemResponse(rsp *http.Response) (*CreateProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProblemResponse parses an HTTP response from a DeleteProblemWithResponse call
func ParseDeleteProblemResponse(rsp *http.Response) (*DeleteProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProblemResponse parses an HTTP response from a GetProblemWithResponse call
func ParseGetProblemResponse(rsp *http.Response) (*GetProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProblemResponse parses an HTTP response from a UpdateProblemWithResponse call
func ParseUpdateProblemResponse(rsp *http.Response) (*UpdateProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/buBL+KwR7Hs4BVMtJevrgN8dO2uxukyBOsVg0wYKRxjZbiVQpql1v4P++IKkL",
	"dbXc2knazZsvM+Twm5lvOCPdY4+HEWfAZIxH9zgigoQgQehvEyJhwcXqzFffKMMjHBG5xA5mJAQ8wtTH",
	"DhbwOaECfDySIgEHx94SQqI05lyERCo5Jl+/wg6WqwjMV1iAwOu1gyecSYjlPre4FPwugHB/W6yVehxx",
	"FoPG7Zj4V/A5gVhepT+rX32IPUEjSbky4Zj4SBihAV47+JSLO+r7wNpVchGtcM41dKxjj3OOPCOTashT",
	"njC/S0GiuRLR8u8ZSeSSC/o3dOjYUgONt4GuFEE6tgSPQEhqMKJ+L2wzJ91j+IuEUaD+PKaMiBWSAiAu",
	"VGIpKFtg44zMlx+Mc/Uat7kov/sInlSLZ/al7qqb+Z2799i4wLW8s2ckMrgkhPrDfwTM8Qi/cIvEdVPA",
	"3Rztdb4jEYKsamZZazcax/3KoecJ85S/0X+JWBz8D93fMIRcF3ncB7TgEKMlCLhh6xtWxyRP8voh/UQQ",
	"E0f2bgfLo2GInSI6crGGtb8jkFKzkP6nYelYEiHjC7YJ9ymRkMrLZLOXzK4zI9wer/l6jn3+3KZmx+ml",
	"pyAJDZQdJAgu5nj0oZdFeO1U/RMZ6twiBM1SKeVuDMR8/fppbovznPhUWhm61aEyvZ5nq+Rg6TRnfSMt",
	"9rjQodZQjGo+q+HTjkOGam8MCjc8wMlKBFNdPlPt9HMrC++AJn6M7E9t2TLfO4qIEdg6fzdXkGzhDrNm",
	"OSDAklBpXVyenGMHz67HV9cnU+zgyW8Xs5OptUgBv4a15LDD4eHhy+H/Xx68LjldyTXp0/mcekkgV7YF",
	"J+PZH9jB706mZ+/fYQe/HV/p7YtdUonaeqc0gFKW3OmLQJOolaeNNX21TSH3S+foDMRCcpu6KKkM7Jzu",
	"ukgZ2ZJRTQGQArBtHWqnq5CITz7/WiGAFy/Q9VeOZkk4GAxQyufIvp42OEckjIHIrjjdueBDTgTbqajw",
	"n5AYuopLbwfRjRR0nW6npHki+4v3Kkh2FOSOKMNSgtU+fjPfp45u5fuHzJNHCS1NJtuFVqbSHFq9NEuO",
	"tRK/OLY6c5yEG/uaBh5wdhAbVmS0VbStb6Q7uIo6OM+YElrj48kUnZ6dT9Gbixs2mRxb3xohjMFLBJWr",
	"mbLNnGecNs+63v/5y+/X6sc7IALEaUYN6te0rVYLmn+LDZZSRmYKQdmcayY3ntWNHHoLQYTGfkiVTV9A",
	"xKZvPxgMB0NNGBEwElE8wkeD4eAAO3o8oo1ziVJzy63oAnTGKqdoo9XlEb8BOQ6CSSFYGYkcDof5fYSZ",
	"W3wUBdTTK7gfY3O3K4YufbI+DxJ99vJU4uJXdbRXw4O2xXLr3MYxh1Y+2qxcH9toTiWL2OqzV1iRXsTj",
	"BuAmAoiEnMhMTEIsj7m/2gNiaTNUn1kdGqjKKBrjzDToCWG5duqR6d5Tf21OEIC5OZaBnurfLaDtWWfL",
	"xaQQca1Z6Pq2ht2rzaerz+seC1Sl2cvgyriwPbKThsB+H/lkl3g/Ulb8mz1r5ZnVR3bxfya2T/av9LyN",
	"5D9A4yBAudVPgb7SxnpjJUjl9hTylaHYj1gHciDr4dm3COQYb8lJ+bOq5xJQjug2TtgL0jvnknRO0cIk",
	"1kjsp/BVV7Xekbv2Rlz2k4Dnct2LDl0v4KZxTZO0Qu3q3zgrlWhJoggYZQtEGfK4rz4tIYh0v1mpV0rz",
	"mUofxol6oNLqxJl+SPAtTtSaz07clxPtaVXHvfkyE9tjratO1p7s0CTFrHRTbrqOIpLPZSlDcgnojnif",
	"gPl1ptLy2SCwFuX6laDPCeguNX0nyMtD234VKB/9HTo9XgvqLIVhEkgaESFdtdBLn0jyDb7cdI3vHTnV",
	"WWUtNp5SC1BESD3TerYArcGwgfKKJ9rPlFdO1TZ62wvSO6fFrhbAYDXcjFXDe38/i3c7moZdOfjRmPIB",
	"g8kg5j9HlP00TAdLw3OwD7cqMGIQX7KIqmRmBAyNL89QHIFH56nLsIMTEaSPxUauG3CPBEsey9HRcDh0",
	"SUTx+nb9TwAAAP//784YcvksAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
