// Package codeHelpCoreGen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package codeHelpCoreGen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Authorization_JWTScopes = "Authorization_JWT.Scopes"
)

// Defines values for ContestStatus.
const (
	CLOSED  ContestStatus = "CLOSED"
	OPEN    ContestStatus = "OPEN"
	STARTED ContestStatus = "STARTED"
)

// Defines values for Difficulty.
const (
	EASY   Difficulty = "EASY"
	HARD   Difficulty = "HARD"
	MEDIUM Difficulty = "MEDIUM"
)

// Defines values for SubmissionStatus.
const (
	ACCEPTED SubmissionStatus = "ACCEPTED"
	DECLINED SubmissionStatus = "DECLINED"
)

// CategoriesResponse defines model for CategoriesResponse.
type CategoriesResponse struct {
	Categories []Category `json:"categories"`
}

// Category defines model for Category.
type Category struct {
	Name *string `json:"name,omitempty"`
}

// ContestBaseEntry defines model for ContestBaseEntry.
type ContestBaseEntry struct {
	Duration string `json:"duration"`
	Name     string `json:"name"`
	StartsOn Date   `json:"startsOn"`
}

// ContestEntry defines model for ContestEntry.
type ContestEntry struct {
	Duration string           `json:"duration"`
	Id       *Id              `json:"id,omitempty"`
	Name     string           `json:"name"`
	Problems []ContestProblem `json:"problems"`
	StartsOn Date             `json:"startsOn"`
	Status   *ContestStatus   `json:"status,omitempty"`
}

// ContestProblem defines model for ContestProblem.
type ContestProblem struct {
	Id      *Id          `json:"id,omitempty"`
	Problem ProblemEntry `json:"problem"`
	Score   int          `json:"score"`
}

// ContestStatus defines model for ContestStatus.
type ContestStatus string

// ContestsResponse defines model for ContestsResponse.
type ContestsResponse struct {
	Contests []ContestEntry `json:"contests"`
}

// Date defines model for Date.
type Date = openapi_types.Date

// Difficulty defines model for Difficulty.
type Difficulty string

// File defines model for File.
type File = openapi_types.File

// Id defines model for Id.
type Id = int

// ProblemBaseEntry defines model for ProblemBaseEntry.
type ProblemBaseEntry struct {
	Category   *Category  `json:"category,omitempty"`
	Difficulty Difficulty `json:"difficulty"`
	Markdown   *string    `json:"markdown,omitempty"`
	Title      string     `json:"title"`
}

// ProblemByLikes defines model for ProblemByLikes.
type ProblemByLikes struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Id          *Id        `json:"id,omitempty"`
	Likes       int        `json:"likes"`
	Markdown    *string    `json:"markdown,omitempty"`
	StarterCode string     `json:"starterCode"`
	Title       string     `json:"title"`
}

// ProblemEntry defines model for ProblemEntry.
type ProblemEntry struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Id          *Id        `json:"id,omitempty"`
	Markdown    *string    `json:"markdown,omitempty"`
	StarterCode string     `json:"starterCode"`
	Title       string     `json:"title"`
}

// ProblemReqBody defines model for ProblemReqBody.
type ProblemReqBody struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Markdown    *string    `json:"markdown,omitempty"`
	RunnerCode  File       `json:"runnerCode"`
	StarterCode File       `json:"starterCode"`
	TestCases   []File     `json:"testCases"`
	Title       string     `json:"title"`
}

// ProblemsResponse defines model for ProblemsResponse.
type ProblemsResponse struct {
	Problems []ProblemEntry `json:"problems"`
}

// ProblemsTop10Response defines model for ProblemsTop10Response.
type ProblemsTop10Response struct {
	Problems []ProblemByLikes `json:"problems"`
}

// SubmissionBaseEntry defines model for SubmissionBaseEntry.
type SubmissionBaseEntry struct {
	Code     string `json:"code"`
	Language string `json:"language"`
}

// SubmissionEntry defines model for SubmissionEntry.
type SubmissionEntry struct {
	Code          string           `json:"code"`
	Id            *Id              `json:"id,omitempty"`
	Language      string           `json:"language"`
	Status        SubmissionStatus `json:"status"`
	TimeSubmitted Date             `json:"timeSubmitted"`
}

// SubmissionReqBody defines model for SubmissionReqBody.
type SubmissionReqBody struct {
	Code      string `json:"code"`
	Language  string `json:"language"`
	ProblemId Id     `json:"problemId"`
}

// SubmissionStatus defines model for SubmissionStatus.
type SubmissionStatus string

// SubmissionsResponse defines model for SubmissionsResponse.
type SubmissionsResponse struct {
	Submissions []SubmissionEntry `json:"submissions"`
}

// UserStatistics defines model for UserStatistics.
type UserStatistics struct {
	Easy   int `json:"easy"`
	Hard   int `json:"hard"`
	Medium int `json:"medium"`
	Solved int `json:"solved"`
}

// SetContestProblemScoreJSONBody defines parameters for SetContestProblemScore.
type SetContestProblemScoreJSONBody struct {
	Score *int `json:"score,omitempty"`
}

// RunCodeJSONBody defines parameters for RunCode.
type RunCodeJSONBody struct {
	Code      *string `json:"code,omitempty"`
	Input     *string `json:"input,omitempty"`
	Language  *string `json:"language,omitempty"`
	ProblemId *Id     `json:"problemId,omitempty"`
}

// GetSubmissionsJSONBody defines parameters for GetSubmissions.
type GetSubmissionsJSONBody struct {
	ProblemId *Id `json:"problemId,omitempty"`
}

// CreateCategoriesJSONRequestBody defines body for CreateCategories for application/json ContentType.
type CreateCategoriesJSONRequestBody = Category

// SetContestProblemScoreJSONRequestBody defines body for SetContestProblemScore for application/json ContentType.
type SetContestProblemScoreJSONRequestBody SetContestProblemScoreJSONBody

// CreateContestEntryJSONRequestBody defines body for CreateContestEntry for application/json ContentType.
type CreateContestEntryJSONRequestBody = ContestBaseEntry

// CreateContestProblemEntryMultipartRequestBody defines body for CreateContestProblemEntry for multipart/form-data ContentType.
type CreateContestProblemEntryMultipartRequestBody = ProblemReqBody

// EditContestEntryJSONRequestBody defines body for EditContestEntry for application/json ContentType.
type EditContestEntryJSONRequestBody = ContestBaseEntry

// CreateProblemEntryMultipartRequestBody defines body for CreateProblemEntry for multipart/form-data ContentType.
type CreateProblemEntryMultipartRequestBody = ProblemReqBody

// EditProblemEntryMultipartRequestBody defines body for EditProblemEntry for multipart/form-data ContentType.
type EditProblemEntryMultipartRequestBody = ProblemReqBody

// RunCodeJSONRequestBody defines body for RunCode for application/json ContentType.
type RunCodeJSONRequestBody RunCodeJSONBody

// GetSubmissionsJSONRequestBody defines body for GetSubmissions for application/json ContentType.
type GetSubmissionsJSONRequestBody GetSubmissionsJSONBody

// CreateSubmissionsEntryJSONRequestBody defines body for CreateSubmissionsEntry for application/json ContentType.
type CreateSubmissionsEntryJSONRequestBody = SubmissionReqBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProblems request
	GetProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoriesWithBody request with any body
	CreateCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategories(ctx context.Context, body CreateCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContestProblem request
	DeleteContestProblem(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestProblem request
	GetContestProblem(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetContestProblemScoreWithBody request with any body
	SetContestProblemScoreWithBody(ctx context.Context, contestId Id, problemId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetContestProblemScore(ctx context.Context, contestId Id, problemId Id, body SetContestProblemScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseContest request
	CloseContest(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartContest request
	StartContest(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestEntries request
	GetContestEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContestEntryWithBody request with any body
	CreateContestEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContestEntry(ctx context.Context, body CreateContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContestEntry request
	DeleteContestEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContestEntry request
	GetContestEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContestProblemEntryWithBody request with any body
	CreateContestProblemEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditContestEntryWithBody request with any body
	EditContestEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditContestEntry(ctx context.Context, id Id, body EditContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProblemEntries request
	GetProblemEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProblemEntryWithBody request with any body
	CreateProblemEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLikedProblems request
	GetLikedProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTop10Problems request
	GetTop10Problems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProblemEntry request
	DeleteProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProblemEntry request
	GetProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditProblemEntryWithBody request with any body
	EditProblemEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IsProblemEntryLiked request
	IsProblemEntryLiked(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleLikeProblemEntry request
	ToggleLikeProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunCodeWithBody request with any body
	RunCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunCode(ctx context.Context, body RunCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatistics request
	GetStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubmissionsWithBody request with any body
	GetSubmissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSubmissions(ctx context.Context, body GetSubmissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSubmissionsEntryWithBody request with any body
	CreateSubmissionsEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubmissionsEntry(ctx context.Context, body CreateSubmissionsEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategories(ctx context.Context, body CreateCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContestProblem(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestProblemRequest(c.Server, contestId, problemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestProblem(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestProblemRequest(c.Server, contestId, problemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetContestProblemScoreWithBody(ctx context.Context, contestId Id, problemId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetContestProblemScoreRequestWithBody(c.Server, contestId, problemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetContestProblemScore(ctx context.Context, contestId Id, problemId Id, body SetContestProblemScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetContestProblemScoreRequest(c.Server, contestId, problemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseContest(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartContest(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartContestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContestEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContestEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContestEntry(ctx context.Context, body CreateContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContestEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContestEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContestEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContestEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContestEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContestProblemEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContestProblemEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContestEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditContestEntry(ctx context.Context, id Id, body EditContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditContestEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProblemEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblemEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProblemEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProblemEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLikedProblems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLikedProblemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTop10Problems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTop10ProblemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProblemEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblemEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditProblemEntryWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditProblemEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IsProblemEntryLiked(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIsProblemEntryLikedRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleLikeProblemEntry(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleLikeProblemEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunCodeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunCodeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunCode(ctx context.Context, body RunCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunCodeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatistics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubmissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubmissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubmissions(ctx context.Context, body GetSubmissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubmissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubmissionsEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubmissionsEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubmissionsEntry(ctx context.Context, body CreateSubmissionsEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubmissionsEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetProblemsRequest generates requests for GetProblems
func NewGetProblemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/problems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoriesRequest calls the generic CreateCategories builder with application/json body
func NewCreateCategoriesRequest(server string, body CreateCategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCategoriesRequestWithBody generates requests for CreateCategories with any type of body
func NewCreateCategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestProblemRequest generates requests for DeleteContestProblem
func NewDeleteContestProblemRequest(server string, contestId Id, problemId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "problemId", runtime.ParamLocationPath, problemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contest/%s/problems/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestProblemRequest generates requests for GetContestProblem
func NewGetContestProblemRequest(server string, contestId Id, problemId Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "problemId", runtime.ParamLocationPath, problemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contest/%s/problems/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetContestProblemScoreRequest calls the generic SetContestProblemScore builder with application/json body
func NewSetContestProblemScoreRequest(server string, contestId Id, problemId Id, body SetContestProblemScoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetContestProblemScoreRequestWithBody(server, contestId, problemId, "application/json", bodyReader)
}

// NewSetContestProblemScoreRequestWithBody generates requests for SetContestProblemScore with any type of body
func NewSetContestProblemScoreRequestWithBody(server string, contestId Id, problemId Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contestId", runtime.ParamLocationPath, contestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "problemId", runtime.ParamLocationPath, problemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contest/%s/problems/%s/set-score", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloseContestRequest generates requests for CloseContest
func NewCloseContestRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contest/%s/close", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartContestRequest generates requests for StartContest
func NewStartContestRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contest/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestEntriesRequest generates requests for GetContestEntries
func NewGetContestEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContestEntryRequest calls the generic CreateContestEntry builder with application/json body
func NewCreateContestEntryRequest(server string, body CreateContestEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContestEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContestEntryRequestWithBody generates requests for CreateContestEntry with any type of body
func NewCreateContestEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContestEntryRequest generates requests for DeleteContestEntry
func NewDeleteContestEntryRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContestEntryRequest generates requests for GetContestEntry
func NewGetContestEntryRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContestProblemEntryRequestWithBody generates requests for CreateContestProblemEntry with any type of body
func NewCreateContestProblemEntryRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditContestEntryRequest calls the generic EditContestEntry builder with application/json body
func NewEditContestEntryRequest(server string, id Id, body EditContestEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditContestEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEditContestEntryRequestWithBody generates requests for EditContestEntry with any type of body
func NewEditContestEntryRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProblemEntriesRequest generates requests for GetProblemEntries
func NewGetProblemEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProblemEntryRequestWithBody generates requests for CreateProblemEntry with any type of body
func NewCreateProblemEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLikedProblemsRequest generates requests for GetLikedProblems
func NewGetLikedProblemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/liked")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTop10ProblemsRequest generates requests for GetTop10Problems
func NewGetTop10ProblemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/top10")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProblemEntryRequest generates requests for DeleteProblemEntry
func NewDeleteProblemEntryRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProblemEntryRequest generates requests for GetProblemEntry
func NewGetProblemEntryRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditProblemEntryRequestWithBody generates requests for EditProblemEntry with any type of body
func NewEditProblemEntryRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIsProblemEntryLikedRequest generates requests for IsProblemEntryLiked
func NewIsProblemEntryLikedRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/%s/is-liked", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleLikeProblemEntryRequest generates requests for ToggleLikeProblemEntry
func NewToggleLikeProblemEntryRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/problems/%s/like", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunCodeRequest calls the generic RunCode builder with application/json body
func NewRunCodeRequest(server string, body RunCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunCodeRequestWithBody(server, "application/json", bodyReader)
}

// NewRunCodeRequestWithBody generates requests for RunCode with any type of body
func NewRunCodeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/run-code")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatisticsRequest generates requests for GetStatistics
func NewGetStatisticsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubmissionsRequest calls the generic GetSubmissions builder with application/json body
func NewGetSubmissionsRequest(server string, body GetSubmissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSubmissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSubmissionsRequestWithBody generates requests for GetSubmissions with any type of body
func NewGetSubmissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/submissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSubmissionsEntryRequest calls the generic CreateSubmissionsEntry builder with application/json body
func NewCreateSubmissionsEntryRequest(server string, body CreateSubmissionsEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubmissionsEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubmissionsEntryRequestWithBody generates requests for CreateSubmissionsEntry with any type of body
func NewCreateSubmissionsEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetProblemsWithResponse request
	GetProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProblemsResponse, error)

	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// CreateCategoriesWithBodyWithResponse request with any body
	CreateCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoriesResponse, error)

	CreateCategoriesWithResponse(ctx context.Context, body CreateCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoriesResponse, error)

	// DeleteContestProblemWithResponse request
	DeleteContestProblemWithResponse(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*DeleteContestProblemResponse, error)

	// GetContestProblemWithResponse request
	GetContestProblemWithResponse(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*GetContestProblemResponse, error)

	// SetContestProblemScoreWithBodyWithResponse request with any body
	SetContestProblemScoreWithBodyWithResponse(ctx context.Context, contestId Id, problemId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetContestProblemScoreResponse, error)

	SetContestProblemScoreWithResponse(ctx context.Context, contestId Id, problemId Id, body SetContestProblemScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*SetContestProblemScoreResponse, error)

	// CloseContestWithResponse request
	CloseContestWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*CloseContestResponse, error)

	// StartContestWithResponse request
	StartContestWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*StartContestResponse, error)

	// GetContestEntriesWithResponse request
	GetContestEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContestEntriesResponse, error)

	// CreateContestEntryWithBodyWithResponse request with any body
	CreateContestEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestEntryResponse, error)

	CreateContestEntryWithResponse(ctx context.Context, body CreateContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContestEntryResponse, error)

	// DeleteContestEntryWithResponse request
	DeleteContestEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteContestEntryResponse, error)

	// GetContestEntryWithResponse request
	GetContestEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetContestEntryResponse, error)

	// CreateContestProblemEntryWithBodyWithResponse request with any body
	CreateContestProblemEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestProblemEntryResponse, error)

	// EditContestEntryWithBodyWithResponse request with any body
	EditContestEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestEntryResponse, error)

	EditContestEntryWithResponse(ctx context.Context, id Id, body EditContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestEntryResponse, error)

	// GetProblemEntriesWithResponse request
	GetProblemEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProblemEntriesResponse, error)

	// CreateProblemEntryWithBodyWithResponse request with any body
	CreateProblemEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProblemEntryResponse, error)

	// GetLikedProblemsWithResponse request
	GetLikedProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLikedProblemsResponse, error)

	// GetTop10ProblemsWithResponse request
	GetTop10ProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTop10ProblemsResponse, error)

	// DeleteProblemEntryWithResponse request
	DeleteProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteProblemEntryResponse, error)

	// GetProblemEntryWithResponse request
	GetProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetProblemEntryResponse, error)

	// EditProblemEntryWithBodyWithResponse request with any body
	EditProblemEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProblemEntryResponse, error)

	// IsProblemEntryLikedWithResponse request
	IsProblemEntryLikedWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*IsProblemEntryLikedResponse, error)

	// ToggleLikeProblemEntryWithResponse request
	ToggleLikeProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*ToggleLikeProblemEntryResponse, error)

	// RunCodeWithBodyWithResponse request with any body
	RunCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunCodeResponse, error)

	RunCodeWithResponse(ctx context.Context, body RunCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*RunCodeResponse, error)

	// GetStatisticsWithResponse request
	GetStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatisticsResponse, error)

	// GetSubmissionsWithBodyWithResponse request with any body
	GetSubmissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error)

	GetSubmissionsWithResponse(ctx context.Context, body GetSubmissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error)

	// CreateSubmissionsEntryWithBodyWithResponse request with any body
	CreateSubmissionsEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubmissionsEntryResponse, error)

	CreateSubmissionsEntryWithResponse(ctx context.Context, body CreateSubmissionsEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubmissionsEntryResponse, error)
}

type GetProblemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProblemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoriesResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestProblemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestProblem
}

// Status returns HTTPResponse.Status
func (r GetContestProblemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestProblemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetContestProblemScoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetContestProblemScoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetContestProblemScoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartContestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StartContestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartContestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestsResponse
}

// Status returns HTTPResponse.Status
func (r GetContestEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContestEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateContestEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContestEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContestEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContestEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContestEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContestEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContestEntry
}

// Status returns HTTPResponse.Status
func (r GetContestEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContestEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContestProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateContestProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContestProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditContestEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditContestEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditContestEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProblemEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemsResponse
}

// Status returns HTTPResponse.Status
func (r GetProblemEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblemEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLikedProblemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemsResponse
}

// Status returns HTTPResponse.Status
func (r GetLikedProblemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLikedProblemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTop10ProblemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemsTop10Response
}

// Status returns HTTPResponse.Status
func (r GetTop10ProblemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTop10ProblemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProblemByLikes
}

// Status returns HTTPResponse.Status
func (r GetProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IsProblemEntryLikedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r IsProblemEntryLikedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IsProblemEntryLikedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleLikeProblemEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ToggleLikeProblemEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleLikeProblemEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserStatistics
}

// Status returns HTTPResponse.Status
func (r GetStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubmissionsResponse
}

// Status returns HTTPResponse.Status
func (r GetSubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSubmissionsEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSubmissionsEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubmissionsEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetProblemsWithResponse request returning *GetProblemsResponse
func (c *ClientWithResponses) GetProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProblemsResponse, error) {
	rsp, err := c.GetProblems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProblemsResponse(rsp)
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// CreateCategoriesWithBodyWithResponse request with arbitrary body returning *CreateCategoriesResponse
func (c *ClientWithResponses) CreateCategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoriesResponse, error) {
	rsp, err := c.CreateCategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoriesResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoriesWithResponse(ctx context.Context, body CreateCategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoriesResponse, error) {
	rsp, err := c.CreateCategories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoriesResponse(rsp)
}

// DeleteContestProblemWithResponse request returning *DeleteContestProblemResponse
func (c *ClientWithResponses) DeleteContestProblemWithResponse(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*DeleteContestProblemResponse, error) {
	rsp, err := c.DeleteContestProblem(ctx, contestId, problemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestProblemResponse(rsp)
}

// GetContestProblemWithResponse request returning *GetContestProblemResponse
func (c *ClientWithResponses) GetContestProblemWithResponse(ctx context.Context, contestId Id, problemId Id, reqEditors ...RequestEditorFn) (*GetContestProblemResponse, error) {
	rsp, err := c.GetContestProblem(ctx, contestId, problemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestProblemResponse(rsp)
}

// SetContestProblemScoreWithBodyWithResponse request with arbitrary body returning *SetContestProblemScoreResponse
func (c *ClientWithResponses) SetContestProblemScoreWithBodyWithResponse(ctx context.Context, contestId Id, problemId Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetContestProblemScoreResponse, error) {
	rsp, err := c.SetContestProblemScoreWithBody(ctx, contestId, problemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetContestProblemScoreResponse(rsp)
}

func (c *ClientWithResponses) SetContestProblemScoreWithResponse(ctx context.Context, contestId Id, problemId Id, body SetContestProblemScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*SetContestProblemScoreResponse, error) {
	rsp, err := c.SetContestProblemScore(ctx, contestId, problemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetContestProblemScoreResponse(rsp)
}

// CloseContestWithResponse request returning *CloseContestResponse
func (c *ClientWithResponses) CloseContestWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*CloseContestResponse, error) {
	rsp, err := c.CloseContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseContestResponse(rsp)
}

// StartContestWithResponse request returning *StartContestResponse
func (c *ClientWithResponses) StartContestWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*StartContestResponse, error) {
	rsp, err := c.StartContest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartContestResponse(rsp)
}

// GetContestEntriesWithResponse request returning *GetContestEntriesResponse
func (c *ClientWithResponses) GetContestEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContestEntriesResponse, error) {
	rsp, err := c.GetContestEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestEntriesResponse(rsp)
}

// CreateContestEntryWithBodyWithResponse request with arbitrary body returning *CreateContestEntryResponse
func (c *ClientWithResponses) CreateContestEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestEntryResponse, error) {
	rsp, err := c.CreateContestEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContestEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateContestEntryWithResponse(ctx context.Context, body CreateContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContestEntryResponse, error) {
	rsp, err := c.CreateContestEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContestEntryResponse(rsp)
}

// DeleteContestEntryWithResponse request returning *DeleteContestEntryResponse
func (c *ClientWithResponses) DeleteContestEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteContestEntryResponse, error) {
	rsp, err := c.DeleteContestEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContestEntryResponse(rsp)
}

// GetContestEntryWithResponse request returning *GetContestEntryResponse
func (c *ClientWithResponses) GetContestEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetContestEntryResponse, error) {
	rsp, err := c.GetContestEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContestEntryResponse(rsp)
}

// CreateContestProblemEntryWithBodyWithResponse request with arbitrary body returning *CreateContestProblemEntryResponse
func (c *ClientWithResponses) CreateContestProblemEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContestProblemEntryResponse, error) {
	rsp, err := c.CreateContestProblemEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContestProblemEntryResponse(rsp)
}

// EditContestEntryWithBodyWithResponse request with arbitrary body returning *EditContestEntryResponse
func (c *ClientWithResponses) EditContestEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditContestEntryResponse, error) {
	rsp, err := c.EditContestEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestEntryResponse(rsp)
}

func (c *ClientWithResponses) EditContestEntryWithResponse(ctx context.Context, id Id, body EditContestEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*EditContestEntryResponse, error) {
	rsp, err := c.EditContestEntry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditContestEntryResponse(rsp)
}

// GetProblemEntriesWithResponse request returning *GetProblemEntriesResponse
func (c *ClientWithResponses) GetProblemEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProblemEntriesResponse, error) {
	rsp, err := c.GetProblemEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProblemEntriesResponse(rsp)
}

// CreateProblemEntryWithBodyWithResponse request with arbitrary body returning *CreateProblemEntryResponse
func (c *ClientWithResponses) CreateProblemEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProblemEntryResponse, error) {
	rsp, err := c.CreateProblemEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProblemEntryResponse(rsp)
}

// GetLikedProblemsWithResponse request returning *GetLikedProblemsResponse
func (c *ClientWithResponses) GetLikedProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLikedProblemsResponse, error) {
	rsp, err := c.GetLikedProblems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLikedProblemsResponse(rsp)
}

// GetTop10ProblemsWithResponse request returning *GetTop10ProblemsResponse
func (c *ClientWithResponses) GetTop10ProblemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTop10ProblemsResponse, error) {
	rsp, err := c.GetTop10Problems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTop10ProblemsResponse(rsp)
}

// DeleteProblemEntryWithResponse request returning *DeleteProblemEntryResponse
func (c *ClientWithResponses) DeleteProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteProblemEntryResponse, error) {
	rsp, err := c.DeleteProblemEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProblemEntryResponse(rsp)
}

// GetProblemEntryWithResponse request returning *GetProblemEntryResponse
func (c *ClientWithResponses) GetProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetProblemEntryResponse, error) {
	rsp, err := c.GetProblemEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProblemEntryResponse(rsp)
}

// EditProblemEntryWithBodyWithResponse request with arbitrary body returning *EditProblemEntryResponse
func (c *ClientWithResponses) EditProblemEntryWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditProblemEntryResponse, error) {
	rsp, err := c.EditProblemEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditProblemEntryResponse(rsp)
}

// IsProblemEntryLikedWithResponse request returning *IsProblemEntryLikedResponse
func (c *ClientWithResponses) IsProblemEntryLikedWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*IsProblemEntryLikedResponse, error) {
	rsp, err := c.IsProblemEntryLiked(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIsProblemEntryLikedResponse(rsp)
}

// ToggleLikeProblemEntryWithResponse request returning *ToggleLikeProblemEntryResponse
func (c *ClientWithResponses) ToggleLikeProblemEntryWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*ToggleLikeProblemEntryResponse, error) {
	rsp, err := c.ToggleLikeProblemEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleLikeProblemEntryResponse(rsp)
}

// RunCodeWithBodyWithResponse request with arbitrary body returning *RunCodeResponse
func (c *ClientWithResponses) RunCodeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunCodeResponse, error) {
	rsp, err := c.RunCodeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunCodeResponse(rsp)
}

func (c *ClientWithResponses) RunCodeWithResponse(ctx context.Context, body RunCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*RunCodeResponse, error) {
	rsp, err := c.RunCode(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunCodeResponse(rsp)
}

// GetStatisticsWithResponse request returning *GetStatisticsResponse
func (c *ClientWithResponses) GetStatisticsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatisticsResponse, error) {
	rsp, err := c.GetStatistics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticsResponse(rsp)
}

// GetSubmissionsWithBodyWithResponse request with arbitrary body returning *GetSubmissionsResponse
func (c *ClientWithResponses) GetSubmissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error) {
	rsp, err := c.GetSubmissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubmissionsResponse(rsp)
}

func (c *ClientWithResponses) GetSubmissionsWithResponse(ctx context.Context, body GetSubmissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error) {
	rsp, err := c.GetSubmissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubmissionsResponse(rsp)
}

// CreateSubmissionsEntryWithBodyWithResponse request with arbitrary body returning *CreateSubmissionsEntryResponse
func (c *ClientWithResponses) CreateSubmissionsEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubmissionsEntryResponse, error) {
	rsp, err := c.CreateSubmissionsEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubmissionsEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateSubmissionsEntryWithResponse(ctx context.Context, body CreateSubmissionsEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubmissionsEntryResponse, error) {
	rsp, err := c.CreateSubmissionsEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubmissionsEntryResponse(rsp)
}

// ParseGetProblemsResponse parses an HTTP response from a GetProblemsWithResponse call
func ParseGetProblemsResponse(rsp *http.Response) (*GetProblemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProblemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoriesResponse parses an HTTP response from a CreateCategoriesWithResponse call
func ParseCreateCategoriesResponse(rsp *http.Response) (*CreateCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContestProblemResponse parses an HTTP response from a DeleteContestProblemWithResponse call
func ParseDeleteContestProblemResponse(rsp *http.Response) (*DeleteContestProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestProblemResponse parses an HTTP response from a GetContestProblemWithResponse call
func ParseGetContestProblemResponse(rsp *http.Response) (*GetContestProblemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestProblemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestProblem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetContestProblemScoreResponse parses an HTTP response from a SetContestProblemScoreWithResponse call
func ParseSetContestProblemScoreResponse(rsp *http.Response) (*SetContestProblemScoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetContestProblemScoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCloseContestResponse parses an HTTP response from a CloseContestWithResponse call
func ParseCloseContestResponse(rsp *http.Response) (*CloseContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStartContestResponse parses an HTTP response from a StartContestWithResponse call
func ParseStartContestResponse(rsp *http.Response) (*StartContestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartContestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestEntriesResponse parses an HTTP response from a GetContestEntriesWithResponse call
func ParseGetContestEntriesResponse(rsp *http.Response) (*GetContestEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContestEntryResponse parses an HTTP response from a CreateContestEntryWithResponse call
func ParseCreateContestEntryResponse(rsp *http.Response) (*CreateContestEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContestEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContestEntryResponse parses an HTTP response from a DeleteContestEntryWithResponse call
func ParseDeleteContestEntryResponse(rsp *http.Response) (*DeleteContestEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContestEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContestEntryResponse parses an HTTP response from a GetContestEntryWithResponse call
func ParseGetContestEntryResponse(rsp *http.Response) (*GetContestEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContestEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContestEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContestProblemEntryResponse parses an HTTP response from a CreateContestProblemEntryWithResponse call
func ParseCreateContestProblemEntryResponse(rsp *http.Response) (*CreateContestProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContestProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEditContestEntryResponse parses an HTTP response from a EditContestEntryWithResponse call
func ParseEditContestEntryResponse(rsp *http.Response) (*EditContestEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditContestEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProblemEntriesResponse parses an HTTP response from a GetProblemEntriesWithResponse call
func ParseGetProblemEntriesResponse(rsp *http.Response) (*GetProblemEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProblemEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProblemEntryResponse parses an HTTP response from a CreateProblemEntryWithResponse call
func ParseCreateProblemEntryResponse(rsp *http.Response) (*CreateProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLikedProblemsResponse parses an HTTP response from a GetLikedProblemsWithResponse call
func ParseGetLikedProblemsResponse(rsp *http.Response) (*GetLikedProblemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLikedProblemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTop10ProblemsResponse parses an HTTP response from a GetTop10ProblemsWithResponse call
func ParseGetTop10ProblemsResponse(rsp *http.Response) (*GetTop10ProblemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTop10ProblemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemsTop10Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProblemEntryResponse parses an HTTP response from a DeleteProblemEntryWithResponse call
func ParseDeleteProblemEntryResponse(rsp *http.Response) (*DeleteProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProblemEntryResponse parses an HTTP response from a GetProblemEntryWithResponse call
func ParseGetProblemEntryResponse(rsp *http.Response) (*GetProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProblemByLikes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditProblemEntryResponse parses an HTTP response from a EditProblemEntryWithResponse call
func ParseEditProblemEntryResponse(rsp *http.Response) (*EditProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIsProblemEntryLikedResponse parses an HTTP response from a IsProblemEntryLikedWithResponse call
func ParseIsProblemEntryLikedResponse(rsp *http.Response) (*IsProblemEntryLikedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IsProblemEntryLikedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseToggleLikeProblemEntryResponse parses an HTTP response from a ToggleLikeProblemEntryWithResponse call
func ParseToggleLikeProblemEntryResponse(rsp *http.Response) (*ToggleLikeProblemEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleLikeProblemEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRunCodeResponse parses an HTTP response from a RunCodeWithResponse call
func ParseRunCodeResponse(rsp *http.Response) (*RunCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatisticsResponse parses an HTTP response from a GetStatisticsWithResponse call
func ParseGetStatisticsResponse(rsp *http.Response) (*GetStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubmissionsResponse parses an HTTP response from a GetSubmissionsWithResponse call
func ParseGetSubmissionsResponse(rsp *http.Response) (*GetSubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubmissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSubmissionsEntryResponse parses an HTTP response from a CreateSubmissionsEntryWithResponse call
func ParseCreateSubmissionsEntryResponse(rsp *http.Response) (*CreateSubmissionsEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubmissionsEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaW2/juBX+KwSnD11Aseyk0we/ZZxsmzYzGcRZFEUQFIx0bHNGIjUklawb+L8XJHUX",
	"JUuOM7PdfdlLzHP7eM7HwyO+4IDHCWfAlMTzF5wQQWJQIMz/0dD8k+E5TojaYA8zEgOe6x88LOBbSgWE",
	"eK5ECh6WwQZioiX+JGCF5/idXyr37a/SvwrxbrfLVxszC6JgzQUFeQsy4UyCcUXwBISiYNYExRrjkoJY",
	"7rOUqd3inYfVNtF+EyHIFmvzpfP3Vd0PxVL++AUCpWULPS2nLBovGH4lcRJpqQ+UEbFFSgBIXOiSSlC2",
	"Nnbb2jlTINUHIuGSKZeVMBVEUc7qlmabs2mMPbziIiYKz8tlLbOe01H1DPA12qLZ6SkKrBMuUamIUPKG",
	"7UP7gihoIWvselXXCnUP3VgUOJAoulnh+f2efW4iuPOaENpE3peWnpZ6jLLUGpZj1vZnK9fONBOwSofq",
	"WdrFTRgLt9qg9cCYOzV/JRr7Fmd2cuyxDLioZ9v7s0qeRpyty0SjTMEaRFfIOFfXE+eyQBhYGmvhm8+X",
	"n7CHl3fnt3eXF9jDi+ub5eVFRUmZ35mSPurJVoxNigKQfvLJtbsiNEVVq9vT6enpyfT9yeyvtdrX6xzB",
	"XdDVigZppLZVeC7Pl//GHv54eXH1y0fs4b+f3xpsSivZipa+n2lk/CkMPxq+cy29CmuOnw5IAQ9nqdRD",
	"hkGFjIeSf1hDoZfEypU7D8dEfA35c4N4371Dd88cLdN4MpmgLE9RCDIQNOkiYEVV1NhJrUSmsfOUqCaI",
	"Fa1F4UqVHLrtNf1qoRrGno3qbeId5dpG7WQjBKvEQV6l3yM5v5Uoh3O+OZFALHjY2KBVygK9n3+eTCY/",
	"oZfJZLLbu1lVZb3x3sK3Dzw8bsQiZawMpE+ZqeN27ENENFktiBzRhxWSfTRY9cSrRlK12ItoD4OPPtab",
	"R1qv6z2nc+ncHU9m0+N7mJf7q3xcpo8xlZJy1ke8h9WHhyPC1ilZN4S/kCdiGXNvTRUKPOtEfwgjicQV",
	"+6u4ZECzV9rM+z19QMRg/q4UhAf12pntpip3zZQujCaiYYhlCXc1CDh3sl6FA/vdFp6VXud8sbj8bJvA",
	"i8vF9dWnjjaw1NHDI7JcNLhQm5m5lwgrNlzB/iJB6DCpVDSQbR+ByG39vB7SeG2IqPdrsyFSMYQ0jcdb",
	"kzx6grq996ObikyJZyMunMliaUOn7UKQCqq2S703Fq7zVG24oP8199P//ONfd/qPj0AEiJ9zf/Rfs4GF",
	"Vmh/LR3cKJXYmQZlK67ls24PL3hI2RptIEpAIJlAgD38BEKa2zyeTaaTqcaDJ8BIQvEcn02mkxn2zLjF",
	"+OeTMKbMr54Pa1D6X3rTjde6xvDfIL/vSTOasSls1p9Op2aMUOlQ5/jmn9rlnYf9+mQlU15ffAsqFUwi",
	"EkVIbQBVRLy2H4vqry5PzJWHGTskSSIaGHH/i7QzjmFzJMfQyMRT9/yaSoX4quqxmcKQtdQ5VNwSNCcm",
	"XDpiXwggCiQiqLh6NGO2Sxphf0tBqpxZjxnxNtu4BrJ/abv+iaPccEfQZv/tBdR/yf7jKtwV6ea/FFy8",
	"s/ojsDfSjgTJJ0nFvQgM6TURuzB6GnMKrzZ9vHcOHgsfXzd/9JzKy3PnVcofXrM32SBO52N/KQ5EWtfj",
	"HwXmI5JLY6zXJpaFE333Vo6pMl+COikmaG5KWoKShofNOk1vQ7Nh2cyGpbH0u0qJw4i30ei1Rpiz986G",
	"pNljvI6Y3RlDw50fRNw2pE5SWOhfZZEDG5IkwHTnQRkKqj1I++jSkoti+t9IAxfg5RKfhvhIZNeK14wD",
	"OuNdmo8Ih8RrJH9T8e7vukzHlS0eE2tJ/frm8dbtWHOM7uDMcxTl7Vgee9fZt7cXK7bQ2YpVB/Bv1Iy1",
	"Pjq9Qe1LUwx9jZdtpA4qhVoPlkP1owpiT7dzQHj17D9WbEcvmCJ53qxYnJ0BWnExtIxqw9CDYewqwTiN",
	"FE2IUL6+/5+ERJHhIDaG6UerQQ8nqQPSjzykK3pYuV2G9EgJ+f9GZo7ZRfd4oQYiSsqRRte44zucba0P",
	"DL3lWvhcRSS/SdQR8QNTZ92dfvXAc+DS0eVbqUbZ/rYq8InTcAhAEf1qB4U9iWPyJpcw3VIqQSD70dGR",
	"ONda555h2Q/IGxPqqOxRPJlNB7WPiidoNu0oLvS4tWChgKdMuSAzX6++J2T1z2UO3JLiar4XpqE91Lgi",
	"s1LHORtfUS0DxkSumJ6p2uzb9DeI7eiJUnz/HJshHSe8PqXHZoKW+f31SEMZ2lzXqTwZwtQSKZECoqtO",
	"hKm0PNgC+UpWIb7O1nz/nCwGQnY4lc1/HjmPgDBXGuaRl0uGQaph6ITzjq/XEVis8vmfA84WilZOo/fD",
	"iUtHLFJ2kr8rcDdAt6m5/YWACDOHY5gGIBFPlS7fZni3KcsfkBxlDDjkzcNPrjcPlGXsUkrezzx0+nCc",
	"BxLe6M/rA+aUzTpQ8Kvyk4jQrgqwIXnozBFVuw5uzJah6lPo4rYQwq158JOlhax93u7lk5w3JI+edP6X",
	"ouaGqxtB19FW+YD+hmdU41P9KFC0bA5H/dVBR6FU7lAVAYOC7gAjvl5D2A1Ixcaxquc75Ojhe+N679Hz",
	"/biKT3Wbyr9XN0vt3yde3XltwU55Q0BqQxR6JhKJlHVc7SrevOWMs/1IqLt5GEUc51GEzPwkIBIkSoiU",
	"5jh/BYnUN6Ly1sOcZ45XHvcP+giTIJ7yQ69hKgGGzj9fmWcbdJUhiD2ciih79DH3/YgHJNpwqeZn0+nU",
	"JwnFu4fd/wIAAP//S3d1aVYzAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
