//go:build go1.22

// Package codeHelpAdminGen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package codeHelpAdminGen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ContestStatus.
const (
	CLOSED  ContestStatus = "CLOSED"
	OPEN    ContestStatus = "OPEN"
	STARTED ContestStatus = "STARTED"
)

// Defines values for Difficulty.
const (
	EASY   Difficulty = "EASY"
	HARD   Difficulty = "HARD"
	MEDIUM Difficulty = "MEDIUM"
)

// Categories defines model for Categories.
type Categories struct {
	Categories []ForumCategory `json:"categories"`
}

// Category defines model for Category.
type Category struct {
	Id   int64  `json:"id"`
	Name string `json:"name"`
}

// CategoryCreate defines model for CategoryCreate.
type CategoryCreate struct {
	Name string `json:"name"`
}

// CategoryRequest defines model for CategoryRequest.
type CategoryRequest struct {
	Name string `json:"name"`
}

// CategoryResponse defines model for CategoryResponse.
type CategoryResponse struct {
	Categories []Category `json:"categories"`
}

// Code defines model for Code.
type Code = string

// CodeLanguage defines model for CodeLanguage.
type CodeLanguage = string

// CodeRunnerRequest defines model for CodeRunnerRequest.
type CodeRunnerRequest struct {
	Code       Code         `json:"code"`
	Language   CodeLanguage `json:"language"`
	RunnerCode Code         `json:"runnerCode"`
	TestCases  TestCases    `json:"testCases"`
}

// CodeRunnerResponse defines model for CodeRunnerResponse.
type CodeRunnerResponse struct {
	Message string `json:"message"`
}

// Comment defines model for Comment.
type Comment struct {
	Content  string    `json:"content"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Replies  *struct {
		Count   int        `json:"count"`
		Replies *[]Comment `json:"replies,omitempty"`
	} `json:"replies,omitempty"`
	Uid  string `json:"uid"`
	User User   `json:"user"`
}

// CommentRequest defines model for CommentRequest.
type CommentRequest struct {
	Content string `json:"content"`
}

// Comments defines model for Comments.
type Comments struct {
	Comments *[]Comment `json:"comments,omitempty"`
}

// Community defines model for Community.
type Community struct {
	Admin       User            `json:"admin"`
	Categories  []ForumCategory `json:"categories"`
	Created     time.Time       `json:"created"`
	Description string          `json:"description"`
	Image       *string         `json:"image,omitempty"`
	Joined      bool            `json:"joined"`
	Moderators  []User          `json:"moderators"`
	Name        string          `json:"name"`
	Posts       []ShortPost     `json:"posts"`
}

// CommunityRequest defines model for CommunityRequest.
type CommunityRequest struct {
	Categories *struct {
		Uids *[]string `json:"uids,omitempty"`
	} `json:"categories,omitempty"`
	Description string  `json:"description"`
	Image       *string `json:"image,omitempty"`
	Name        string  `json:"name"`
}

// Contest defines model for Contest.
type Contest struct {
	Duration string        `json:"duration"`
	Id       int64         `json:"id"`
	Name     string        `json:"name"`
	StartsOn Date          `json:"startsOn"`
	Status   ContestStatus `json:"status"`
}

// ContestDetail defines model for ContestDetail.
type ContestDetail struct {
	Duration string           `json:"duration"`
	Id       int64            `json:"id"`
	Name     string           `json:"name"`
	Problems []ContestProblem `json:"problems"`
	StartsOn Date             `json:"startsOn"`
	Status   ContestStatus    `json:"status"`
}

// ContestEditRequest defines model for ContestEditRequest.
type ContestEditRequest struct {
	Duration string                       `json:"duration"`
	Name     string                       `json:"name"`
	Problems *[]ContestProblemEditRequest `json:"problems,omitempty"`
	StartsOn Date                         `json:"startsOn"`
	Status   *ContestStatus               `json:"status,omitempty"`
}

// ContestProblem defines model for ContestProblem.
type ContestProblem struct {
	Category         *Category  `json:"category,omitempty"`
	ContestProblemId int64      `json:"contestProblemId"`
	Difficulty       Difficulty `json:"difficulty"`
	Id               int64      `json:"id"`
	Score            int        `json:"score"`
	Title            string     `json:"title"`
}

// ContestProblemEditRequest defines model for ContestProblemEditRequest.
type ContestProblemEditRequest struct {
	ContestProblemId *int64 `json:"contestProblemId,omitempty"`
	Score            *int   `json:"score,omitempty"`
}

// ContestRequest defines model for ContestRequest.
type ContestRequest struct {
	Duration string         `json:"duration"`
	Name     string         `json:"name"`
	StartsOn Date           `json:"startsOn"`
	Status   *ContestStatus `json:"status,omitempty"`
}

// ContestResponse defines model for ContestResponse.
type ContestResponse struct {
	Contests []Contest `json:"contests"`
}

// ContestStatus defines model for ContestStatus.
type ContestStatus string

// Date defines model for Date.
type Date = openapi_types.Date

// Difficulty defines model for Difficulty.
type Difficulty string

// ForumCategory defines model for ForumCategory.
type ForumCategory struct {
	Name string `json:"name"`
	Uid  string `json:"uid"`
}

// ModeratorRequest defines model for ModeratorRequest.
type ModeratorRequest struct {
	Username string `json:"username"`
}

// Post defines model for Post.
type Post struct {
	Comments []Comment `json:"comments"`
	Content  string    `json:"content"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Title    string    `json:"title"`
	Uid      string    `json:"uid"`
	User     User      `json:"user"`
}

// PostRequest defines model for PostRequest.
type PostRequest struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// Problem defines model for Problem.
type Problem struct {
	Category   *Category  `json:"category,omitempty"`
	Difficulty Difficulty `json:"difficulty"`
	Id         int64      `json:"id"`
	Title      string     `json:"title"`
}

// ProblemDetail defines model for ProblemDetail.
type ProblemDetail struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Id          int64      `json:"id"`
	Markdown    string     `json:"markdown"`
	RunnerCode  Code       `json:"runnerCode"`
	StarterCode Code       `json:"starterCode"`
	TestCases   TestCases  `json:"testCases"`
	Title       string     `json:"title"`
}

// ProblemRequest defines model for ProblemRequest.
type ProblemRequest struct {
	Category    *CategoryRequest `json:"category,omitempty"`
	Difficulty  Difficulty       `json:"difficulty"`
	Markdown    string           `json:"markdown"`
	RunnerCode  Code             `json:"runnerCode"`
	StarterCode Code             `json:"starterCode"`
	TestCases   TestCases        `json:"testCases"`
	Title       string           `json:"title"`
}

// ProblemResponse defines model for ProblemResponse.
type ProblemResponse struct {
	Problems []Problem `json:"problems"`
}

// ShortCommunities defines model for ShortCommunities.
type ShortCommunities struct {
	Communities []ShortCommunity `json:"communities"`
}

// ShortCommunity defines model for ShortCommunity.
type ShortCommunity struct {
	Categories  *[]ForumCategory `json:"categories,omitempty"`
	Description string           `json:"description"`
	Image       *string          `json:"image,omitempty"`
	Name        string           `json:"name"`
}

// ShortPost defines model for ShortPost.
type ShortPost struct {
	Created time.Time `json:"created"`
	Title   string    `json:"title"`
	Uid     string    `json:"uid"`
	User    User      `json:"user"`
}

// ShortPosts defines model for ShortPosts.
type ShortPosts struct {
	Posts *[]ShortPost `json:"posts,omitempty"`
}

// TestCase defines model for TestCase.
type TestCase = string

// TestCases defines model for TestCases.
type TestCases = []struct {
	Id  *int64    `json:"id,omitempty"`
	In  *TestCase `json:"in,omitempty"`
	Out *TestCase `json:"out,omitempty"`
}

// User defines model for User.
type User struct {
	Username string `json:"username"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// CategoryId defines model for CategoryId.
type CategoryId = int64

// ContestId defines model for ContestId.
type ContestId = int64

// ProblemId defines model for ProblemId.
type ProblemId = int64

// GetCommentsForPostParams defines parameters for GetCommentsForPost.
type GetCommentsForPostParams struct {
	// Post Post uid
	Post string `form:"post" json:"post"`
}

// CommentOnPostParams defines parameters for CommentOnPost.
type CommentOnPostParams struct {
	// Post Post uid
	Post string `form:"post" json:"post"`
}

// LeaveCommunityParams defines parameters for LeaveCommunity.
type LeaveCommunityParams struct {
	// Community Community uid
	Community string `form:"community" json:"community"`
}

// JoinCommunityParams defines parameters for JoinCommunity.
type JoinCommunityParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`
}

// RemoveModeratorParams defines parameters for RemoveModerator.
type RemoveModeratorParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`

	// Username moderator to remove
	Username string `form:"username" json:"username"`
}

// GetCommunityModeratorsParams defines parameters for GetCommunityModerators.
type GetCommunityModeratorsParams struct {
	// Name Community uid
	Name string `form:"name" json:"name"`
}

// AddModeratorParams defines parameters for AddModerator.
type AddModeratorParams struct {
	// Community Community name
	Community string `form:"community" json:"community"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	// Community Community name
	Community *string `form:"community,omitempty" json:"community,omitempty"`
}

// CreateCommunityPostParams defines parameters for CreateCommunityPost.
type CreateCommunityPostParams struct {
	Community string `form:"community" json:"community"`
}

// CreateProblemParams defines parameters for CreateProblem.
type CreateProblemParams struct {
	ContestId *int64 `form:"contestId,omitempty" json:"contestId,omitempty"`
}

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryRequest

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryRequest

// RunCodeJSONRequestBody defines body for RunCode for application/json ContentType.
type RunCodeJSONRequestBody = CodeRunnerRequest

// CreateContestJSONRequestBody defines body for CreateContest for application/json ContentType.
type CreateContestJSONRequestBody = ContestRequest

// UpdateContestJSONRequestBody defines body for UpdateContest for application/json ContentType.
type UpdateContestJSONRequestBody = ContestEditRequest

// CreateForumCategoryJSONRequestBody defines body for CreateForumCategory for application/json ContentType.
type CreateForumCategoryJSONRequestBody = CategoryCreate

// UpdateForumCategoryJSONRequestBody defines body for UpdateForumCategory for application/json ContentType.
type UpdateForumCategoryJSONRequestBody = CategoryCreate

// CommentOnPostJSONRequestBody defines body for CommentOnPost for application/json ContentType.
type CommentOnPostJSONRequestBody = CommentRequest

// ReplyToCommentJSONRequestBody defines body for ReplyToComment for application/json ContentType.
type ReplyToCommentJSONRequestBody = CommentRequest

// UpdateCommentJSONRequestBody defines body for UpdateComment for application/json ContentType.
type UpdateCommentJSONRequestBody = CommentRequest

// CreateCommunityJSONRequestBody defines body for CreateCommunity for application/json ContentType.
type CreateCommunityJSONRequestBody = CommunityRequest

// AddModeratorJSONRequestBody defines body for AddModerator for application/json ContentType.
type AddModeratorJSONRequestBody = ModeratorRequest

// UpdateCommunityJSONRequestBody defines body for UpdateCommunity for application/json ContentType.
type UpdateCommunityJSONRequestBody = CommunityRequest

// CreateCommunityPostJSONRequestBody defines body for CreateCommunityPost for application/json ContentType.
type CreateCommunityPostJSONRequestBody = PostRequest

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = PostRequest

// CreateProblemJSONRequestBody defines body for CreateProblem for application/json ContentType.
type CreateProblemJSONRequestBody = ProblemRequest

// UpdateProblemJSONRequestBody defines body for UpdateProblem for application/json ContentType.
type UpdateProblemJSONRequestBody = ProblemRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /categories)
	GetAllCategories(w http.ResponseWriter, r *http.Request)

	// (POST /categories)
	CreateCategory(w http.ResponseWriter, r *http.Request)

	// (DELETE /categories/{id})
	DeleteCategory(w http.ResponseWriter, r *http.Request, id CategoryId)

	// (PUT /categories/{id})
	UpdateCategory(w http.ResponseWriter, r *http.Request, id CategoryId)

	// (POST /code-runner)
	RunCode(w http.ResponseWriter, r *http.Request)

	// (GET /contests)
	GetAllContests(w http.ResponseWriter, r *http.Request)

	// (POST /contests)
	CreateContest(w http.ResponseWriter, r *http.Request)

	// (DELETE /contests/{id})
	DeleteContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (GET /contests/{id})
	GetContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (PUT /contests/{id})
	UpdateContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (GET /forum/category)
	GetAllForumCategories(w http.ResponseWriter, r *http.Request)

	// (POST /forum/category)
	CreateForumCategory(w http.ResponseWriter, r *http.Request)

	// (DELETE /forum/category/{uid})
	DeleteForumCategory(w http.ResponseWriter, r *http.Request, uid string)

	// (PUT /forum/category/{uid})
	UpdateForumCategory(w http.ResponseWriter, r *http.Request, uid string)

	// (GET /forum/comment)
	GetCommentsForPost(w http.ResponseWriter, r *http.Request, params GetCommentsForPostParams)

	// (POST /forum/comment)
	CommentOnPost(w http.ResponseWriter, r *http.Request, params CommentOnPostParams)

	// (DELETE /forum/comment/{uid})
	DeleteComment(w http.ResponseWriter, r *http.Request, uid string)

	// (GET /forum/comment/{uid})
	GetCommentReplies(w http.ResponseWriter, r *http.Request, uid string)

	// (POST /forum/comment/{uid})
	ReplyToComment(w http.ResponseWriter, r *http.Request, uid string)

	// (PUT /forum/comment/{uid})
	UpdateComment(w http.ResponseWriter, r *http.Request, uid string)

	// (GET /forum/community)
	GetAllCommunities(w http.ResponseWriter, r *http.Request)

	// (POST /forum/community)
	CreateCommunity(w http.ResponseWriter, r *http.Request)

	// (DELETE /forum/community/member)
	LeaveCommunity(w http.ResponseWriter, r *http.Request, params LeaveCommunityParams)

	// (PATCH /forum/community/member)
	JoinCommunity(w http.ResponseWriter, r *http.Request, params JoinCommunityParams)

	// (DELETE /forum/community/moderator)
	RemoveModerator(w http.ResponseWriter, r *http.Request, params RemoveModeratorParams)

	// (GET /forum/community/moderator)
	GetCommunityModerators(w http.ResponseWriter, r *http.Request, params GetCommunityModeratorsParams)

	// (PATCH /forum/community/moderator)
	AddModerator(w http.ResponseWriter, r *http.Request, params AddModeratorParams)

	// (DELETE /forum/community/{name})
	DeleteCommunity(w http.ResponseWriter, r *http.Request, name string)

	// (GET /forum/community/{name})
	GetCommunityByUid(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /forum/community/{name})
	UpdateCommunity(w http.ResponseWriter, r *http.Request, name string)

	// (GET /forum/post)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)

	// (POST /forum/post)
	CreateCommunityPost(w http.ResponseWriter, r *http.Request, params CreateCommunityPostParams)

	// (DELETE /forum/post/{uid})
	DeletePost(w http.ResponseWriter, r *http.Request, uid string)

	// (GET /forum/post/{uid})
	GetPost(w http.ResponseWriter, r *http.Request, uid string)

	// (PUT /forum/post/{uid})
	UpdatePost(w http.ResponseWriter, r *http.Request, uid string)

	// (GET /problems)
	GetAllProblems(w http.ResponseWriter, r *http.Request)

	// (POST /problems)
	CreateProblem(w http.ResponseWriter, r *http.Request, params CreateProblemParams)

	// (DELETE /problems/{id})
	DeleteProblem(w http.ResponseWriter, r *http.Request, id ProblemId)

	// (GET /problems/{id})
	GetProblem(w http.ResponseWriter, r *http.Request, id ProblemId)

	// (PUT /problems/{id})
	UpdateProblem(w http.ResponseWriter, r *http.Request, id ProblemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllCategories operation middleware
func (siw *ServerInterfaceWrapper) GetAllCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id CategoryId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id CategoryId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RunCode operation middleware
func (siw *ServerInterfaceWrapper) RunCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllContests operation middleware
func (siw *ServerInterfaceWrapper) GetAllContests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllContests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateContest operation middleware
func (siw *ServerInterfaceWrapper) CreateContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateContest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteContest operation middleware
func (siw *ServerInterfaceWrapper) DeleteContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetContest operation middleware
func (siw *ServerInterfaceWrapper) GetContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateContest operation middleware
func (siw *ServerInterfaceWrapper) UpdateContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllForumCategories operation middleware
func (siw *ServerInterfaceWrapper) GetAllForumCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllForumCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateForumCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateForumCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateForumCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteForumCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteForumCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteForumCategory(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateForumCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateForumCategory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateForumCategory(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommentsForPost operation middleware
func (siw *ServerInterfaceWrapper) GetCommentsForPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommentsForPostParams

	// ------------- Required query parameter "post" -------------

	if paramValue := r.URL.Query().Get("post"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "post"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "post", r.URL.Query(), &params.Post)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommentsForPost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CommentOnPost operation middleware
func (siw *ServerInterfaceWrapper) CommentOnPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CommentOnPostParams

	// ------------- Required query parameter "post" -------------

	if paramValue := r.URL.Query().Get("post"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "post"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "post", r.URL.Query(), &params.Post)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "post", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CommentOnPost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComment(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommentReplies operation middleware
func (siw *ServerInterfaceWrapper) GetCommentReplies(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommentReplies(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplyToComment operation middleware
func (siw *ServerInterfaceWrapper) ReplyToComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplyToComment(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateComment operation middleware
func (siw *ServerInterfaceWrapper) UpdateComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComment(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllCommunities operation middleware
func (siw *ServerInterfaceWrapper) GetAllCommunities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCommunities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCommunity operation middleware
func (siw *ServerInterfaceWrapper) CreateCommunity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCommunity(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LeaveCommunity operation middleware
func (siw *ServerInterfaceWrapper) LeaveCommunity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LeaveCommunityParams

	// ------------- Required query parameter "community" -------------

	if paramValue := r.URL.Query().Get("community"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "community"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LeaveCommunity(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// JoinCommunity operation middleware
func (siw *ServerInterfaceWrapper) JoinCommunity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params JoinCommunityParams

	// ------------- Required query parameter "community" -------------

	if paramValue := r.URL.Query().Get("community"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "community"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JoinCommunity(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveModerator operation middleware
func (siw *ServerInterfaceWrapper) RemoveModerator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveModeratorParams

	// ------------- Required query parameter "community" -------------

	if paramValue := r.URL.Query().Get("community"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "community"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveModerator(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommunityModerators operation middleware
func (siw *ServerInterfaceWrapper) GetCommunityModerators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommunityModeratorsParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommunityModerators(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddModerator operation middleware
func (siw *ServerInterfaceWrapper) AddModerator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddModeratorParams

	// ------------- Required query parameter "community" -------------

	if paramValue := r.URL.Query().Get("community"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "community"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddModerator(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCommunity operation middleware
func (siw *ServerInterfaceWrapper) DeleteCommunity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCommunity(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCommunityByUid operation middleware
func (siw *ServerInterfaceWrapper) GetCommunityByUid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCommunityByUid(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateCommunity operation middleware
func (siw *ServerInterfaceWrapper) UpdateCommunity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCommunity(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Optional query parameter "community" -------------

	err = runtime.BindQueryParameter("form", true, false, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCommunityPost operation middleware
func (siw *ServerInterfaceWrapper) CreateCommunityPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommunityPostParams

	// ------------- Required query parameter "community" -------------

	if paramValue := r.URL.Query().Get("community"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "community"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "community", r.URL.Query(), &params.Community)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "community", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCommunityPost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPost operation middleware
func (siw *ServerInterfaceWrapper) GetPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPost(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameterWithOptions("simple", "uid", r.PathValue("uid"), &uid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, uid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllProblems operation middleware
func (siw *ServerInterfaceWrapper) GetAllProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllProblems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProblem operation middleware
func (siw *ServerInterfaceWrapper) CreateProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateProblemParams

	// ------------- Optional query parameter "contestId" -------------

	err = runtime.BindQueryParameter("form", true, false, "contestId", r.URL.Query(), &params.ContestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProblem(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProblem operation middleware
func (siw *ServerInterfaceWrapper) DeleteProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProblem operation middleware
func (siw *ServerInterfaceWrapper) GetProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateProblem operation middleware
func (siw *ServerInterfaceWrapper) UpdateProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/categories", wrapper.GetAllCategories)
	m.HandleFunc("POST "+options.BaseURL+"/categories", wrapper.CreateCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/categories/{id}", wrapper.DeleteCategory)
	m.HandleFunc("PUT "+options.BaseURL+"/categories/{id}", wrapper.UpdateCategory)
	m.HandleFunc("POST "+options.BaseURL+"/code-runner", wrapper.RunCode)
	m.HandleFunc("GET "+options.BaseURL+"/contests", wrapper.GetAllContests)
	m.HandleFunc("POST "+options.BaseURL+"/contests", wrapper.CreateContest)
	m.HandleFunc("DELETE "+options.BaseURL+"/contests/{id}", wrapper.DeleteContest)
	m.HandleFunc("GET "+options.BaseURL+"/contests/{id}", wrapper.GetContest)
	m.HandleFunc("PUT "+options.BaseURL+"/contests/{id}", wrapper.UpdateContest)
	m.HandleFunc("GET "+options.BaseURL+"/forum/category", wrapper.GetAllForumCategories)
	m.HandleFunc("POST "+options.BaseURL+"/forum/category", wrapper.CreateForumCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/category/{uid}", wrapper.DeleteForumCategory)
	m.HandleFunc("PUT "+options.BaseURL+"/forum/category/{uid}", wrapper.UpdateForumCategory)
	m.HandleFunc("GET "+options.BaseURL+"/forum/comment", wrapper.GetCommentsForPost)
	m.HandleFunc("POST "+options.BaseURL+"/forum/comment", wrapper.CommentOnPost)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/comment/{uid}", wrapper.DeleteComment)
	m.HandleFunc("GET "+options.BaseURL+"/forum/comment/{uid}", wrapper.GetCommentReplies)
	m.HandleFunc("POST "+options.BaseURL+"/forum/comment/{uid}", wrapper.ReplyToComment)
	m.HandleFunc("PUT "+options.BaseURL+"/forum/comment/{uid}", wrapper.UpdateComment)
	m.HandleFunc("GET "+options.BaseURL+"/forum/community", wrapper.GetAllCommunities)
	m.HandleFunc("POST "+options.BaseURL+"/forum/community", wrapper.CreateCommunity)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/community/member", wrapper.LeaveCommunity)
	m.HandleFunc("PATCH "+options.BaseURL+"/forum/community/member", wrapper.JoinCommunity)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/community/moderator", wrapper.RemoveModerator)
	m.HandleFunc("GET "+options.BaseURL+"/forum/community/moderator", wrapper.GetCommunityModerators)
	m.HandleFunc("PATCH "+options.BaseURL+"/forum/community/moderator", wrapper.AddModerator)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/community/{name}", wrapper.DeleteCommunity)
	m.HandleFunc("GET "+options.BaseURL+"/forum/community/{name}", wrapper.GetCommunityByUid)
	m.HandleFunc("PUT "+options.BaseURL+"/forum/community/{name}", wrapper.UpdateCommunity)
	m.HandleFunc("GET "+options.BaseURL+"/forum/post", wrapper.GetPosts)
	m.HandleFunc("POST "+options.BaseURL+"/forum/post", wrapper.CreateCommunityPost)
	m.HandleFunc("DELETE "+options.BaseURL+"/forum/post/{uid}", wrapper.DeletePost)
	m.HandleFunc("GET "+options.BaseURL+"/forum/post/{uid}", wrapper.GetPost)
	m.HandleFunc("PUT "+options.BaseURL+"/forum/post/{uid}", wrapper.UpdatePost)
	m.HandleFunc("GET "+options.BaseURL+"/problems", wrapper.GetAllProblems)
	m.HandleFunc("POST "+options.BaseURL+"/problems", wrapper.CreateProblem)
	m.HandleFunc("DELETE "+options.BaseURL+"/problems/{id}", wrapper.DeleteProblem)
	m.HandleFunc("GET "+options.BaseURL+"/problems/{id}", wrapper.GetProblem)
	m.HandleFunc("PUT "+options.BaseURL+"/problems/{id}", wrapper.UpdateProblem)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"O1QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
