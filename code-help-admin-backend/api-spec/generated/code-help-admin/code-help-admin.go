//go:build go1.22

// Package codeHelpAdminGen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version (devel) DO NOT EDIT.
package codeHelpAdminGen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ContestStatus.
const (
	CLOSED  ContestStatus = "CLOSED"
	OPEN    ContestStatus = "OPEN"
	STARTED ContestStatus = "STARTED"
)

// Defines values for Difficulty.
const (
	EASY   Difficulty = "EASY"
	HARD   Difficulty = "HARD"
	MEDIUM Difficulty = "MEDIUM"
)

// Category defines model for Category.
type Category struct {
	Name *string `json:"name,omitempty"`
}

// Code defines model for Code.
type Code = string

// Contest defines model for Contest.
type Contest struct {
	Duration *string        `json:"duration,omitempty"`
	Id       *int64         `json:"id,omitempty"`
	Name     *string        `json:"name,omitempty"`
	StartsOn *Date          `json:"startsOn,omitempty"`
	Status   *ContestStatus `json:"status,omitempty"`
}

// ContestRequest defines model for ContestRequest.
type ContestRequest struct {
	Duration *string        `json:"duration,omitempty"`
	Name     *string        `json:"name,omitempty"`
	StartsOn *Date          `json:"startsOn,omitempty"`
	Status   *ContestStatus `json:"status,omitempty"`
}

// ContestResponse defines model for ContestResponse.
type ContestResponse struct {
	Contests *[]Contest `json:"contests,omitempty"`
}

// ContestStatus defines model for ContestStatus.
type ContestStatus string

// Date defines model for Date.
type Date = openapi_types.Date

// Difficulty defines model for Difficulty.
type Difficulty string

// File defines model for File.
type File = openapi_types.File

// Problem defines model for Problem.
type Problem struct {
	Category   *Category   `json:"category,omitempty"`
	Difficulty *Difficulty `json:"difficulty,omitempty"`
	Id         *int64      `json:"id,omitempty"`
	Title      *string     `json:"title,omitempty"`
}

// ProblemDetail defines model for ProblemDetail.
type ProblemDetail struct {
	Category    *Category   `json:"category,omitempty"`
	Difficulty  *Difficulty `json:"difficulty,omitempty"`
	Id          *int64      `json:"id,omitempty"`
	Markdown    string      `json:"markdown"`
	RunnerCode  Code        `json:"runnerCode"`
	StarterCode Code        `json:"starterCode"`
	TestCases   []struct {
		Id  *int64    `json:"id,omitempty"`
		In  *TestCase `json:"in,omitempty"`
		Out *TestCase `json:"out,omitempty"`
	} `json:"testCases"`
	Title *string `json:"title,omitempty"`
}

// ProblemRequest defines model for ProblemRequest.
type ProblemRequest struct {
	Category    *Category  `json:"category,omitempty"`
	Difficulty  Difficulty `json:"difficulty"`
	Markdown    string     `json:"markdown"`
	RunnerCode  File       `json:"runnerCode"`
	StarterCode File       `json:"starterCode"`
	TestCases   []File     `json:"testCases"`
	Title       string     `json:"title"`
}

// ProblemResponse defines model for ProblemResponse.
type ProblemResponse struct {
	Problems *[]Problem `json:"problems,omitempty"`
}

// TestCase defines model for TestCase.
type TestCase = string

// ContestId defines model for ContestId.
type ContestId = int64

// ProblemId defines model for ProblemId.
type ProblemId = int64

// CreateContestJSONRequestBody defines body for CreateContest for application/json ContentType.
type CreateContestJSONRequestBody = ContestRequest

// UpdateContestJSONRequestBody defines body for UpdateContest for application/json ContentType.
type UpdateContestJSONRequestBody = ContestRequest

// CreateProblemMultipartRequestBody defines body for CreateProblem for multipart/form-data ContentType.
type CreateProblemMultipartRequestBody = ProblemRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /contests)
	GetAllContests(w http.ResponseWriter, r *http.Request)

	// (POST /contests)
	CreateContest(w http.ResponseWriter, r *http.Request)

	// (DELETE /contests/{id})
	DeleteContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (GET /contests/{id})
	GetContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (PUT /contests/{id})
	UpdateContest(w http.ResponseWriter, r *http.Request, id ContestId)

	// (GET /problems)
	GetAllProblems(w http.ResponseWriter, r *http.Request)

	// (POST /problems)
	CreateProblem(w http.ResponseWriter, r *http.Request)

	// (DELETE /problems/{id})
	DeleteProblem(w http.ResponseWriter, r *http.Request, id ProblemId)

	// (GET /problems/{id})
	GetProblem(w http.ResponseWriter, r *http.Request, id ProblemId)

	// (PUT /problems/{id})
	UpdateProblem(w http.ResponseWriter, r *http.Request, id ProblemId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllContests operation middleware
func (siw *ServerInterfaceWrapper) GetAllContests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllContests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateContest operation middleware
func (siw *ServerInterfaceWrapper) CreateContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateContest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteContest operation middleware
func (siw *ServerInterfaceWrapper) DeleteContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetContest operation middleware
func (siw *ServerInterfaceWrapper) GetContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateContest operation middleware
func (siw *ServerInterfaceWrapper) UpdateContest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ContestId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateContest(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllProblems operation middleware
func (siw *ServerInterfaceWrapper) GetAllProblems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllProblems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProblem operation middleware
func (siw *ServerInterfaceWrapper) CreateProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProblem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProblem operation middleware
func (siw *ServerInterfaceWrapper) DeleteProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProblem operation middleware
func (siw *ServerInterfaceWrapper) GetProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateProblem operation middleware
func (siw *ServerInterfaceWrapper) UpdateProblem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ProblemId

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProblem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/contests", wrapper.GetAllContests)
	m.HandleFunc("POST "+options.BaseURL+"/contests", wrapper.CreateContest)
	m.HandleFunc("DELETE "+options.BaseURL+"/contests/{id}", wrapper.DeleteContest)
	m.HandleFunc("GET "+options.BaseURL+"/contests/{id}", wrapper.GetContest)
	m.HandleFunc("PUT "+options.BaseURL+"/contests/{id}", wrapper.UpdateContest)
	m.HandleFunc("GET "+options.BaseURL+"/problems", wrapper.GetAllProblems)
	m.HandleFunc("POST "+options.BaseURL+"/problems", wrapper.CreateProblem)
	m.HandleFunc("DELETE "+options.BaseURL+"/problems/{id}", wrapper.DeleteProblem)
	m.HandleFunc("GET "+options.BaseURL+"/problems/{id}", wrapper.GetProblem)
	m.HandleFunc("PUT "+options.BaseURL+"/problems/{id}", wrapper.UpdateProblem)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYQW/bOBP9K8T0O3wLKJacpD3o5thJG+w2DuL0sGhyYKSxzVYiVZJq1wj03xekJEuK",
	"KVcJnC16i+QZzrw3b4ajPEIk0kxw5FpB+AgZlTRFjdI+TQXXqPRlbB4YhxAyqtfgAacpQggsBg9UtMaU",
	"GoulkCnV5j3X707BA73JsHzEFUooCg+upXhIMD3ckUVtXmZMNa6E3FgsUmQoNUP7S3n+I+A/NM0Sc8YZ",
	"41RuiJaIqjlZacn4yuZavREPXzDSUHgwFfGTM5Y5jzQTnPyfytX4D/J4xwnxfRKJGMlKoCJrlHjHizu+",
	"G8KrCd7NNs4lNed2o43XJ0EKXsPK1sxxNosHEeg5mKnSIvYXx9FKU6nV3Gb3P4lLCOGN3wjJrwriz6jG",
	"yl7n6mfWVdRFadxTAGtyg9/y16Ltd2RDZYIr3KUjKg3s30xjOjQoNNGolHSzN/xiCwd5nkL4GebX51fg",
	"weJ2cnN7PgMPpn/NF+czuHeQZ0np0H0cHB8fBW+Pxu86JTN2Ln+2XLIoT/SmncH5ZPE3ePDxfHb56SN4",
	"8GFyY8M3USqLnfMuWIKdvnmwU8JlWo0yB+2tIbSX7dqu8CDu4Ngro8byOV2umS6RDZhzFbIZasoS40OT",
	"ZL6E8PP+zGpCCu8pIymVX2Px40lfvnlDbn8IssjT0WhEstKbxKgiybK+/pQ55yjrSbxfzDFu+/N5LkbX",
	"U6qw2zldTIOZZz+dDLdVOGMtcj3c3FW8ncaV+C1nEmPTGNtCdGnp0NqGf78T4L7RR+8Y/i8b4JdIy06J",
	"50mrdnFLa5Bnp7Ctjm5gG8wqT53bTFsGpWuHdO8A2mgpo+9KqkoxHH0zVAZcSdvO6LAyOZvOyMXl1Yy8",
	"n9/x6fSs9eSgyrbsUthZWVJsFz/yAZOMTOKUGafvKJVdNGA8CkaB7dwMOc0YhHAyCkZj8OxqawH67Zt4",
	"hbZlDCt2CzG7MLxHPUmSaW1mylVSaF2Og2B7n3PrTbMsYZH197+ocuNp1uYBd/y2RBZwuzNCmP85IpMk",
	"IdusLdl0pYx2qpdgBkEmlAPLVCLVWO8SpfJQ6TMRbw6PohxBRVFKvMPZiV0JO8iuBKnDuzEVXlMs/5HF",
	"RXlGguWa0gU6s+8boO2vp567sjHxm6+r4n4n99MX5O71SutVUjy4JPuk2Py8g1qVMswdsD9lMT1ccX6N",
	"goMXKrg9ZfeMm+va7BVr+/RGcNa4A6VKvjNgug7lgCF0e7EzTvQayQONviKPwXMOpPom2VfONE80y6jU",
	"vlnsjmKq6Qug7qno+FnEOq4mFxNxD39tKQwcZg1Jz+uX5v86g4fZ1CHjdu37hPsqKR5c8NXHU4/cPTh1",
	"s6LJhch5bCzeutr/kmuUnCZEofyOkqCUQva3T/9g/N1ZLFH0Kt8s55ahEtSTCmTIyeT6kqgMI7asMgQP",
	"cplACGuts9D3ExHRZC2UDk+CIPDNalfcF/8GAAD//xnvwZoyFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
