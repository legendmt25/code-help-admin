openapi: 3.0.1
info:
  title: 'Code Help Admin'
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Open API specification

security:
  - Authorization_JWT: [ ]

paths:
  /admin/categories:
    get:
      tags: [ category, admin ]
      operationId: getAllCategories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [ category, admin ]
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        201:
          description: Created.
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
  /admin/categories/{id}:
    put:
      tags: [ category, admin ]
      operationId: updateCategory
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags: [ category, admin ]
      operationId: deleteCategory
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /admin/problems:
    get:
      tags: [ problem, admin ]
      operationId: getAllProblems
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [ problem, admin ]
      operationId: createProblem
      parameters:
        - in: query
          name: contestId
          required: false
          schema:
            type: integer
            format: int64
            example: 2
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProblemRequest'
      description: Create a problem in the backend
      responses:
        201:
          description: Created.
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
  /admin/problems/{id}:
    get:
      tags: [ problem, admin ]
      operationId: getProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    put:
      tags: [ problem, admin ]
      operationId: updateProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProblemRequest'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags: [ problem, admin ]
      operationId: deleteProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /admin/contests:
    get:
      tags: [ contest, admin ]
      operationId: getAllContests
      responses:
        200:
          description: OK. All contests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [ contest, admin ]
      operationId: createContest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestRequest'
      responses:
        201:
          description: Created.
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
  /admin/contests/{id}:
    get:
      tags: [ contest, admin ]
      operationId: getContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      responses:
        200:
          description: OK. Contest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestDetail'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    put:
      tags: [ contest, admin ]
      operationId: updateContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestEditRequest'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags: [ contest, admin ]
      operationId: deleteContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /admin/contests/{id}/start:
    get:
      parameters:
        - $ref: '#/components/parameters/ContestId'
      operationId: startContest
      tags: [ contest, admin ]
      description: Starts contest happening in coding helper
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /admin/contests/{id}/close:
    get:
      parameters:
        - $ref: '#/components/parameters/ContestId'
      operationId: closeContest
      tags: [ contest, admin ]
      description: Closes contest happening in coding helper
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          $ref: '#/components/responses/NotFoundResponse'
  /admin/code-runner:
    post:
      operationId: runCode
      tags: [code runner, admin]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CodeRunnerRequest'
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeRunnerResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
components:
  securitySchemes:
    Authorization_JWT: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    CategoryId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
    ProblemId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
    ContestId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    CodeLanguage:
      type: string
      example: 'javascript'
    CodeRunnerRequest:
      type: object
      required: [ runnerCode, language, code, testCases ]
      properties:
        runnerCode:
          $ref: '#/components/schemas/Code'
        language:
          $ref: '#/components/schemas/CodeLanguage'
        code:
          $ref: '#/components/schemas/Code'
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/File'
    CodeRunnerResponse:
      type: object
      required: [ message ]
      properties:
        message:
          type: string
    ProblemResponse:
      type: object
      required: [ problems ]
      properties:
        problems:
          type: array
          items:
            $ref: '#/components/schemas/Problem'
    Problem:
      type: object
      required: [ id, title, difficulty ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        category:
          $ref: '#/components/schemas/Category'
    ProblemDetail:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required: [ markdown, starterCode, runnerCode, testCases ]
          properties:
            markdown:
              type: string
              example: '## Two Sum... problem description'
            starterCode:
              $ref: '#/components/schemas/Code'
            runnerCode:
              $ref: '#/components/schemas/Code'
            testCases:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  in:
                    $ref: '#/components/schemas/TestCase'
                  out:
                    $ref: '#/components/schemas/TestCase'
    TestCase:
      type: string
      example: |
        ABCD FIND GO
        CCBD FIND GO
    Code:
      type: string
      example: |
        function (arg1) {
          // code goes here
        }
    ProblemRequest:
      type: object
      required: [ title, difficulty, markdown, starterCode, runnerCode, testCases ]
      properties:
        category:
          $ref: '#/components/schemas/CategoryRequest'
        title:
          type: string
          example: 'Two sum'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        markdown:
          type: string
          example: '## Two Sum... problem description'
        starterCode:
          $ref: '#/components/schemas/File'
        runnerCode:
          $ref: '#/components/schemas/File'
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/File'
    ContestResponse:
      type: object
      required: [ contests ]
      properties:
        contests:
          type: array
          items:
            $ref: '#/components/schemas/Contest'
    ContestRequest:
      type: object
      required: [ name, duration, startsOn ]
      properties:
        name:
          type: string
          example: 'Contest name'
        status:
          $ref: '#/components/schemas/ContestStatus'
        duration:
          type: string
          format: duration
          example: 1h30m
        startsOn:
          $ref: '#/components/schemas/Date'
    ContestProblemEditRequest:
      type: object
      properties:
        contestProblemId:
          type: integer
          format: int64
        score:
          type: integer
    ContestEditRequest:
      allOf:
        - $ref: '#/components/schemas/ContestRequest'
        - type: object
          properties:
            problems:
              type: array
              items:
                $ref: "#/components/schemas/ContestProblemEditRequest"
    Contest:
      type: object
      required: [ id, name, status, duration, startsOn ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'Contest name'
        status:
          $ref: '#/components/schemas/ContestStatus'
        duration:
          type: string
          format: duration
          example: 1h30m
        startsOn:
          $ref: '#/components/schemas/Date'
    ContestDetail:
      allOf:
        - $ref: '#/components/schemas/Contest'
        - type: object
          required: [ problems ]
          properties:
            problems:
              type: array
              items:
                $ref: '#/components/schemas/ContestProblem'
    ContestProblem:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required: [ contestProblemId, score ]
          properties:
            contestProblemId:
              type: integer
              format: int64
            score:
              type: integer
    CategoryResponse:
      type: object
      required: [ categories ]
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      required: [ id, name ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'Binary trees'
    CategoryRequest:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
          example: 'Binary trees'

    ContestStatus:
      type: string
      enum: [ OPEN, STARTED, CLOSED ]
    Difficulty:
      type: string
      enum: [ EASY, MEDIUM, HARD ]
      example: 'EASY'

    File:
      type: string
      format: binary
    Date:
      type: string
      format: date
      example: '2022-05-16'

  responses:
    NotFoundResponse:
      description: Not found.
    BadRequestResponse:
      description: Bad request.
    ForbiddenResponse:
      description: Forbidden.
    UnauthorizedResponse:
      description: Unauthorized.
    NoContentResponse:
      description: No content.
