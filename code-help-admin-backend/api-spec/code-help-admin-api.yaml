openapi: 3.0.1
info:
  title: 'Code Help Admin'
  version: 1.0.0

servers:
  - url: http://localhost:4000/api/v1
    description: Open API specification

paths:
  /categories:
    get:
      tags: [ category ]
      operationId: getAllCategories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
    post:
      tags: [ category ]
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Created.
  /categories/{id}:
    put:
      tags: [ category ]
      operationId: updateCategory
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        204:
          description: No content.
        404:
          description: Not found.
        400:
          description: Bad request.
    delete:
      tags: [ category ]
      operationId: deleteCategory
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        204:
          description: No content.
        404:
          description: Not found.
  /problems:
    get:
      tags: [ problem ]
      operationId: getAllProblems
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'
    post:
      tags: [ problem ]
      operationId: createProblem
      parameters:
        - in: query
          name: contestId
          required: false
          schema:
            type: integer
            format: int64
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemRequest'
      description: Create a problem in the backend
      responses:
        201:
          description: Created

  /problems/{id}:
    get:
      tags: [ problem ]
      operationId: getProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Not Found
        500:
          description: Internal server error
    put:
      tags: [ problem ]
      operationId: updateProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemRequest'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    delete:
      tags: [ problem ]
      operationId: deleteProblem
      parameters:
        - $ref: '#/components/parameters/ProblemId'
      responses:
        204:
          description: No Content
  /contests:
    get:
      tags: [ contest ]
      operationId: getAllContests
      responses:
        200:
          description: OK. All contests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestResponse'
    post:
      tags: [ contest ]
      operationId: createContest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestRequest'
      responses:
        204:
          description: No content
  /contests/{id}:
    get:
      tags: [ contest ]
      operationId: getContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      responses:
        200:
          description: OK. Contest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestDetail'
    put:
      tags: [ contest ]
      operationId: updateContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestEditRequest'
      responses:
        200:
          description: No content
    delete:
      tags: [ contest ]
      operationId: deleteContest
      parameters:
        - $ref: '#/components/parameters/ContestId'
      responses:
        204:
          description: No content

  /forum/community:
    get:
      tags:
        - community
      operationId: getAllCommunities
      description: Get communities by parameters
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortCommunities'
    post:
      tags:
        - community
      operationId: createCommunity
      description: Create a new community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
  /forum/community/{name}:
    get:
      tags:
        - community
      operationId: getCommunityByUid
      description: Find a specific community by id
      parameters:
        - in: path
          name: name
          description: Community Id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    put:
      tags:
        - community
      operationId: updateCommunity
      description: Update community
      requestBody:
        required: true
        description: Community update request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityRequest'
      parameters:
        - in: path
          name: name
          description: Community name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
    delete:
      tags:
        - community
      operationId: deleteCommunity
      description: Delete the community
      parameters:
        - in: path
          name: name
          description: Community name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
  /forum/community/moderator:
    get:
      tags:
        - community
      operationId: getCommunityModerators
      description: Get moderators for a community
      parameters:
        - in: query
          name: name
          description: Community uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
    patch:
      tags:
        - community
      operationId: addModerator
      description: Add a new moderator to the
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModeratorRequest'
      parameters:
        - in: query
          name: community
          required: true
          description: Community name
          schema:
            type: string
      responses:
        200:
          description: OK
    delete:
      tags:
        - community
      operationId: removeModerator
      parameters:
        - in: query
          name: community
          description: Community name
          required: true
          schema:
            type: string
        - in: query
          name: username
          description: moderator to remove
          required: true
          explode: true
          schema:
            type: string
      responses:
        200:
          description: OK
  /forum/community/member:
    patch:
      tags:
        - community
      operationId: joinCommunity
      description: Join a community
      parameters:
        - in: query
          name: community
          description: Community name
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Bad Request
    delete:
      tags:
        - community
      operationId: leaveCommunity
      description: Leave a community
      parameters:
        - in: query
          name: community
          description: Community uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /forum/post:
    get:
      tags:
        - post
      operationId: getPosts
      description: Get certain posts
      parameters:
        - in: query
          name: community
          description: Community name
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortPosts'
    post:
      tags:
        - post
      operationId: createCommunityPost
      description: Create a post inside a community
      requestBody:
        required: true
        description: Post request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      parameters:
        - in: query
          name: community
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /forum/post/{uid}:
    get:
      tags:
        - post
      operationId: getPost
      description: Get a single post
      parameters:
        - in: path
          name: uid
          description: Post uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - post
      operationId: updatePost
      description: Update content or title of a post
      requestBody:
        required: true
        description: Post update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      parameters:
        - in: path
          name: uid
          description: Post uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        304:
          description: Not Modified
        400:
          description: Bad Request
    delete:
      tags:
        - post
      operationId: deletePost
      parameters:
        - in: path
          name: uid
          description: Post uid
          required: true
          schema:
            type: string
      description: Delete a post
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /forum/comment:
    get:
      tags:
        - comment
      operationId: getCommentsForPost
      description: Get all comments for a post
      parameters:
        - in: query
          name: post
          description: Post uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
    post:
      tags:
        - comment
      operationId: commentOnPost
      description: Write a comment on a post
      requestBody:
        required: true
        description: Comment request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      parameters:
        - in: query
          name: post
          description: Post uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: Bad Request
  /forum/comment/{uid}:
    get:
      tags:
        - comment
      operationId: getCommentReplies
      description: Get all comment replies
      parameters:
        - in: path
          name: uid
          description: Comment uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
    post:
      tags:
        - comment
      operationId: replyToComment
      description: Reply to a comment
      parameters:
        - in: path
          name: uid
          description: Comment uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags:
        - comment
      operationId: updateComment
      parameters:
        - in: path
          name: uid
          description: Comment uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        304:
          description: Not Modified
        400:
          description: Bad Request
    delete:
      tags:
        - comment
      operationId: deleteComment
      parameters:
        - in: path
          name: uid
          description: Comment uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Bad Request

  /forum/category:
    get:
      tags: [ forum category ]
      operationId: getAllForumCategories
      description: Get all categories
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
    post:
      tags: [ forum category ]
      operationId: createForumCategory
      description: Create a new category
      requestBody:
        required: true
        description: Category creation body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        200:
          description: OK

components:
  parameters:
    CategoryId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
    ProblemId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
    ContestId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    ProblemResponse:
      type: object
      required: [ problems ]
      properties:
        problems:
          type: array
          items:
            $ref: '#/components/schemas/Problem'
    Problem:
      type: object
      required: [ id, title, difficulty ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        category:
          $ref: '#/components/schemas/Category'
    ProblemDetail:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required: [ markdown, starterCode, runnerCode, testCases ]
          properties:
            markdown:
              type: string
              example: '## Two Sum... problem description'
            starterCode:
              $ref: '#/components/schemas/Code'
            runnerCode:
              $ref: '#/components/schemas/Code'
            testCases:
              $ref: '#/components/schemas/TestCases'
    TestCase:
      type: string
      example: |
        ABCD FIND GO
        CCBD FIND GO
    Code:
      type: string
      example: |
        function (arg1) {
          // code goes here
        }
    ProblemRequest:
      type: object
      required: [ title, difficulty, markdown, starterCode, runnerCode, testCases ]
      properties:
        category:
          $ref: '#/components/schemas/Category'
        title:
          type: string
          example: 'Two sum'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        markdown:
          type: string
          example: '## Two Sum... problem description'
        starterCode:
          $ref: "#/components/schemas/Code"
        runnerCode:
          $ref: "#/components/schemas/Code"
        testCases:
          $ref: '#/components/schemas/TestCases'
    ContestResponse:
      type: object
      required: [ contests ]
      properties:
        contests:
          type: array
          items:
            $ref: '#/components/schemas/Contest'
    ContestRequest:
      type: object
      required: [ name, duration, startsOn ]
      properties:
        name:
          type: string
          example: 'Contest name'
        status:
          $ref: '#/components/schemas/ContestStatus'
        duration:
          type: string
          format: duration
          example: 1h30m
        startsOn:
          $ref: '#/components/schemas/Date'
    ContestEditRequest:
      allOf:
        - $ref: '#/components/schemas/ContestRequest'
        - type: object
          properties:
            problems:
              type: array
              items:
                type: object
                properties:
                  contestProblemId:
                    type: integer
                    format: int64
                  score:
                    type: integer
    Contest:
      type: object
      required: [ id, name, status, duration, startsOn ]
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: 'Contest name'
        status:
          $ref: '#/components/schemas/ContestStatus'
        duration:
          type: string
          format: duration
          example: 1h30m
        startsOn:
          $ref: '#/components/schemas/Date'
    ContestDetail:
      allOf:
        - $ref: '#/components/schemas/Contest'
        - type: object
          required: [ problems ]
          properties:
            problems:
              type: array
              items:
                $ref: '#/components/schemas/ContestProblem'
    ContestProblem:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required: [ contestProblemId, score ]
          properties:
            contestProblemId:
              type: integer
              format: int64
            score:
              type: integer
    CategoryResponse:
      type: object
      required: [ categories ]
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Category:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
          example: 'Binary trees'

    ContestStatus:
      type: string
      enum: [ OPEN, STARTED, CLOSED ]
    Difficulty:
      type: string
      enum: [ EASY, MEDIUM, HARD ]
      example: 'EASY'

    File:
      type: string
      format: binary
    Date:
      type: string
      format: date
      example: '2022-05-16'
    TestCases:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
          in:
            $ref: '#/components/schemas/TestCase'
          out:
            $ref: '#/components/schemas/TestCase'
    Community:
      allOf:
        - $ref: '#/components/schemas/ShortCommunity'
        - type: object
          required: [ admin, categories, created, moderators, posts, joined ]
          properties:
            admin:
              $ref: '#/components/schemas/User'
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
            posts:
              type: array
              items:
                $ref: '#/components/schemas/ShortPost'
            joined:
              type: boolean
            moderators:
              type: array
              items:
                $ref: '#/components/schemas/User'
            created:
              type: string
              format: date-time
    Communities:
      type: object
      required: [ communities ]
      properties:
        communities:
          type: array
          items:
            $ref: '#/components/schemas/Community'
    ShortCommunity:
      type: object
      required: [ name, description ]
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    ShortCommunities:
      type: object
      required: [ communities ]
      properties:
        communities:
          type: array
          items:
            $ref: '#/components/schemas/ShortCommunity'
    CommunityRequest:
      type: object
      required: [ name, description ]
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        categories:
          type: object
          properties:
            uids:
              type: array
              items:
                type: string

    ShortPost:
      type: object
      required: [ uid, title, created, user ]
      properties:
        uid:
          type: string
        title:
          type: string
        created:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
    ShortPosts:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/ShortPost'
    Post:
      type: object
      allOf:
        - $ref: '#/components/schemas/ShortPost'
        - type: object
          required: [ content, modified, comments ]
          properties:
            content:
              type: string
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            modified:
              type: string
              format: date-time
    Posts:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    Comment:
      type: object
      required: [ uid, content, created, modified, user ]
      properties:
        uid:
          type: string
        content:
          type: string
        created:
          type: string
          format: date-time
        replies:
          type: object
          required: [ count ]
          properties:
            count:
              type: integer
            replies:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

        modified:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
    Comments:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    User:
      type: object
      required: [ username ]
      properties:
        username:
          type: string

    Users:
      type: object
      required: [ users ]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    ForumCategory:
      type: object
      required: [ uid, name ]
      properties:
        uid:
          type: string
        name:
          type: string
    Categories:
      type: object
      required: [ categories ]
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ForumCategory'

    CommentRequest:
      type: object
      required: [ content ]
      properties:
        content:
          type: string

    PostRequest:
      type: object
      required: [ content, title ]
      properties:
        title:
          type: string
        content:
          type: string

    ModeratorRequest:
      type: object
      required: [ username ]
      properties:
        username:
          type: string

    CategoryCreate:
      type: object
      required: [ name ]
      properties:
        name:
          type: string