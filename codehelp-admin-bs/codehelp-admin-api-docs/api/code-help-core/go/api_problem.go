/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// ProblemAPIController binds http requests to an api service and writes the service results to the http response
type ProblemAPIController struct {
	service ProblemAPIServicer
	errorHandler ErrorHandler
}

// ProblemAPIOption for how the controller is set up.
type ProblemAPIOption func(*ProblemAPIController)

// WithProblemAPIErrorHandler inject ErrorHandler into controller
func WithProblemAPIErrorHandler(h ErrorHandler) ProblemAPIOption {
	return func(c *ProblemAPIController) {
		c.errorHandler = h
	}
}

// NewProblemAPIController creates a default api controller
func NewProblemAPIController(s ProblemAPIServicer, opts ...ProblemAPIOption) Router {
	controller := &ProblemAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProblemAPIController
func (c *ProblemAPIController) Routes() Routes {
	return Routes{
		"CreateProblemEntry": Route{
			strings.ToUpper("Post"),
			"/api/problems/create",
			c.CreateProblemEntry,
		},
		"DeleteProblemEntry": Route{
			strings.ToUpper("Delete"),
			"/api/problems/{id}",
			c.DeleteProblemEntry,
		},
		"EditProblemEntry": Route{
			strings.ToUpper("Put"),
			"/api/problems/{id}",
			c.EditProblemEntry,
		},
		"GetLikedProblems": Route{
			strings.ToUpper("Get"),
			"/api/problems/liked",
			c.GetLikedProblems,
		},
		"GetProblemEntries": Route{
			strings.ToUpper("Get"),
			"/api/problems",
			c.GetProblemEntries,
		},
		"GetProblemEntry": Route{
			strings.ToUpper("Get"),
			"/api/problems/{id}",
			c.GetProblemEntry,
		},
		"GetTop10Problems": Route{
			strings.ToUpper("Get"),
			"/api/problems/top10",
			c.GetTop10Problems,
		},
		"IsProblemEntryLiked": Route{
			strings.ToUpper("Get"),
			"/api/problems/{id}/is-liked",
			c.IsProblemEntryLiked,
		},
		"ToggleLikeProblemEntry": Route{
			strings.ToUpper("Get"),
			"/api/problems/{id}/like",
			c.ToggleLikeProblemEntry,
		},
	}
}

// CreateProblemEntry - 
func (c *ProblemAPIController) CreateProblemEntry(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	titleParam := r.FormValue("title")
	
	
	difficultyParam := r.FormValue("difficulty")
	var starterCodeParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "starterCode")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		starterCodeParam = param
	}
	
	
	var runnerCodeParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "runnerCode")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		runnerCodeParam = param
	}
	
	
	var testCasesParam []*os.File
	{
		param, err := ReadFormFilesToTempFiles(r, "testCases")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		testCasesParam = param
	}
	
	
	
	
	categoryParam := r.FormValue("category")
	
	
	markdownParam := r.FormValue("markdown")
	result, err := c.service.CreateProblemEntry(r.Context(), titleParam, difficultyParam, starterCodeParam, runnerCodeParam, testCasesParam, categoryParam, markdownParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProblemEntry - 
func (c *ProblemAPIController) DeleteProblemEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteProblemEntry(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditProblemEntry - 
func (c *ProblemAPIController) EditProblemEntry(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	titleParam := r.FormValue("title")
	
	
	difficultyParam := r.FormValue("difficulty")
	var starterCodeParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "starterCode")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		starterCodeParam = param
	}
	
	
	var runnerCodeParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "runnerCode")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		runnerCodeParam = param
	}
	
	
	var testCasesParam []*os.File
	{
		param, err := ReadFormFilesToTempFiles(r, "testCases")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		testCasesParam = param
	}
	
	
	
	
	categoryParam := r.FormValue("category")
	
	
	markdownParam := r.FormValue("markdown")
	result, err := c.service.EditProblemEntry(r.Context(), idParam, titleParam, difficultyParam, starterCodeParam, runnerCodeParam, testCasesParam, categoryParam, markdownParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLikedProblems - 
func (c *ProblemAPIController) GetLikedProblems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLikedProblems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProblemEntries - 
func (c *ProblemAPIController) GetProblemEntries(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetProblemEntries(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProblemEntry - 
func (c *ProblemAPIController) GetProblemEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetProblemEntry(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTop10Problems - 
func (c *ProblemAPIController) GetTop10Problems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTop10Problems(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IsProblemEntryLiked - 
func (c *ProblemAPIController) IsProblemEntryLiked(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.IsProblemEntryLiked(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ToggleLikeProblemEntry - 
func (c *ProblemAPIController) ToggleLikeProblemEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ToggleLikeProblemEntry(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
