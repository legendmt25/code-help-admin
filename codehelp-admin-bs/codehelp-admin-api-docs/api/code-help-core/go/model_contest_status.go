/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api


import (
	"fmt"
)



type ContestStatus string

// List of ContestStatus
const (
	OPEN ContestStatus = "OPEN"
	STARTED ContestStatus = "STARTED"
	CLOSED ContestStatus = "CLOSED"
)

// AllowedContestStatusEnumValues is all the allowed values of ContestStatus enum
var AllowedContestStatusEnumValues = []ContestStatus{
	"OPEN",
	"STARTED",
	"CLOSED",
}

// validContestStatusEnumValue provides a map of ContestStatuss for fast verification of use input
var validContestStatusEnumValues = map[ContestStatus]struct{}{
	"OPEN": {},
	"STARTED": {},
	"CLOSED": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContestStatus) IsValid() bool {
	_, ok := validContestStatusEnumValues[v]
	return ok
}

// NewContestStatusFromValue returns a pointer to a valid ContestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContestStatusFromValue(v string) (ContestStatus, error) {
	ev := ContestStatus(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ContestStatus: valid values are %v", v, AllowedContestStatusEnumValues)
	}
}



// AssertContestStatusRequired checks if the required fields are not zero-ed
func AssertContestStatusRequired(obj ContestStatus) error {
	return nil
}

// AssertContestStatusConstraints checks if the values respects the defined constraints
func AssertContestStatusConstraints(obj ContestStatus) error {
	return nil
}
