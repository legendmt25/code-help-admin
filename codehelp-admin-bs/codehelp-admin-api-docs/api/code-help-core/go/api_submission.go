/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubmissionAPIController binds http requests to an api service and writes the service results to the http response
type SubmissionAPIController struct {
	service SubmissionAPIServicer
	errorHandler ErrorHandler
}

// SubmissionAPIOption for how the controller is set up.
type SubmissionAPIOption func(*SubmissionAPIController)

// WithSubmissionAPIErrorHandler inject ErrorHandler into controller
func WithSubmissionAPIErrorHandler(h ErrorHandler) SubmissionAPIOption {
	return func(c *SubmissionAPIController) {
		c.errorHandler = h
	}
}

// NewSubmissionAPIController creates a default api controller
func NewSubmissionAPIController(s SubmissionAPIServicer, opts ...SubmissionAPIOption) Router {
	controller := &SubmissionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubmissionAPIController
func (c *SubmissionAPIController) Routes() Routes {
	return Routes{
		"CreateSubmissionsEntry": Route{
			strings.ToUpper("Post"),
			"/api/submit",
			c.CreateSubmissionsEntry,
		},
		"GetSubmissions": Route{
			strings.ToUpper("Post"),
			"/api/submissions",
			c.GetSubmissions,
		},
	}
}

// CreateSubmissionsEntry - 
func (c *SubmissionAPIController) CreateSubmissionsEntry(w http.ResponseWriter, r *http.Request) {
	submissionReqBodyParam := SubmissionReqBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&submissionReqBodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubmissionReqBodyRequired(submissionReqBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubmissionReqBodyConstraints(submissionReqBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSubmissionsEntry(r.Context(), submissionReqBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubmissions - 
func (c *SubmissionAPIController) GetSubmissions(w http.ResponseWriter, r *http.Request) {
	getSubmissionsRequestParam := GetSubmissionsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSubmissionsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSubmissionsRequestRequired(getSubmissionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSubmissionsRequestConstraints(getSubmissionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSubmissions(r.Context(), getSubmissionsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
