/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api

import (
	"context"
	"net/http"
	"os"
	"os"
)



// CategoryAPIRouter defines the required methods for binding the api requests to a responses for the CategoryAPI
// The CategoryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CategoryAPIServicer to perform the required actions, then write the service results to the http response.
type CategoryAPIRouter interface { 
	CreateCategories(http.ResponseWriter, *http.Request)
	GetCategories(http.ResponseWriter, *http.Request)
}
// CodeRunnerAPIRouter defines the required methods for binding the api requests to a responses for the CodeRunnerAPI
// The CodeRunnerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CodeRunnerAPIServicer to perform the required actions, then write the service results to the http response.
type CodeRunnerAPIRouter interface { 
	RunCode(http.ResponseWriter, *http.Request)
}
// ContestAPIRouter defines the required methods for binding the api requests to a responses for the ContestAPI
// The ContestAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ContestAPIServicer to perform the required actions, then write the service results to the http response.
type ContestAPIRouter interface { 
	CloseContest(http.ResponseWriter, *http.Request)
	CreateContestEntry(http.ResponseWriter, *http.Request)
	CreateContestProblemEntry(http.ResponseWriter, *http.Request)
	DeleteContestEntry(http.ResponseWriter, *http.Request)
	DeleteContestProblem(http.ResponseWriter, *http.Request)
	EditContestEntry(http.ResponseWriter, *http.Request)
	GetContestEntries(http.ResponseWriter, *http.Request)
	GetContestEntry(http.ResponseWriter, *http.Request)
	GetContestProblem(http.ResponseWriter, *http.Request)
	SetContestProblemScore(http.ResponseWriter, *http.Request)
	StartContest(http.ResponseWriter, *http.Request)
}
// ProblemAPIRouter defines the required methods for binding the api requests to a responses for the ProblemAPI
// The ProblemAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProblemAPIServicer to perform the required actions, then write the service results to the http response.
type ProblemAPIRouter interface { 
	CreateProblemEntry(http.ResponseWriter, *http.Request)
	DeleteProblemEntry(http.ResponseWriter, *http.Request)
	EditProblemEntry(http.ResponseWriter, *http.Request)
	GetLikedProblems(http.ResponseWriter, *http.Request)
	GetProblemEntries(http.ResponseWriter, *http.Request)
	GetProblemEntry(http.ResponseWriter, *http.Request)
	GetTop10Problems(http.ResponseWriter, *http.Request)
	IsProblemEntryLiked(http.ResponseWriter, *http.Request)
	ToggleLikeProblemEntry(http.ResponseWriter, *http.Request)
}
// SubmissionAPIRouter defines the required methods for binding the api requests to a responses for the SubmissionAPI
// The SubmissionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SubmissionAPIServicer to perform the required actions, then write the service results to the http response.
type SubmissionAPIRouter interface { 
	CreateSubmissionsEntry(http.ResponseWriter, *http.Request)
	GetSubmissions(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	GetStatistics(http.ResponseWriter, *http.Request)
}


// CategoryAPIServicer defines the api actions for the CategoryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CategoryAPIServicer interface { 
	CreateCategories(context.Context, Category) (ImplResponse, error)
	GetCategories(context.Context) (ImplResponse, error)
}


// CodeRunnerAPIServicer defines the api actions for the CodeRunnerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CodeRunnerAPIServicer interface { 
	RunCode(context.Context, RunCodeRequest) (ImplResponse, error)
}


// ContestAPIServicer defines the api actions for the ContestAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContestAPIServicer interface { 
	CloseContest(context.Context, int32) (ImplResponse, error)
	CreateContestEntry(context.Context, ContestBaseEntry) (ImplResponse, error)
	CreateContestProblemEntry(context.Context, int32, string, Difficulty, *os.File, *os.File, []*os.File, Category, string) (ImplResponse, error)
	DeleteContestEntry(context.Context, int32) (ImplResponse, error)
	DeleteContestProblem(context.Context, int32, int32) (ImplResponse, error)
	EditContestEntry(context.Context, int32, ContestBaseEntry) (ImplResponse, error)
	GetContestEntries(context.Context) (ImplResponse, error)
	GetContestEntry(context.Context, int32) (ImplResponse, error)
	GetContestProblem(context.Context, int32, int32) (ImplResponse, error)
	SetContestProblemScore(context.Context, int32, int32, SetContestProblemScoreRequest) (ImplResponse, error)
	StartContest(context.Context, int32) (ImplResponse, error)
}


// ProblemAPIServicer defines the api actions for the ProblemAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProblemAPIServicer interface { 
	CreateProblemEntry(context.Context, string, Difficulty, *os.File, *os.File, []*os.File, Category, string) (ImplResponse, error)
	DeleteProblemEntry(context.Context, int32) (ImplResponse, error)
	EditProblemEntry(context.Context, int32, string, Difficulty, *os.File, *os.File, []*os.File, Category, string) (ImplResponse, error)
	GetLikedProblems(context.Context) (ImplResponse, error)
	GetProblemEntries(context.Context) (ImplResponse, error)
	GetProblemEntry(context.Context, int32) (ImplResponse, error)
	GetTop10Problems(context.Context) (ImplResponse, error)
	IsProblemEntryLiked(context.Context, int32) (ImplResponse, error)
	ToggleLikeProblemEntry(context.Context, int32) (ImplResponse, error)
}


// SubmissionAPIServicer defines the api actions for the SubmissionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SubmissionAPIServicer interface { 
	CreateSubmissionsEntry(context.Context, SubmissionReqBody) (ImplResponse, error)
	GetSubmissions(context.Context, GetSubmissionsRequest) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	GetStatistics(context.Context) (ImplResponse, error)
}
