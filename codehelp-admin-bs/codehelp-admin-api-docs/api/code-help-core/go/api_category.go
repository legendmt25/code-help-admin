/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CategoryAPIController binds http requests to an api service and writes the service results to the http response
type CategoryAPIController struct {
	service CategoryAPIServicer
	errorHandler ErrorHandler
}

// CategoryAPIOption for how the controller is set up.
type CategoryAPIOption func(*CategoryAPIController)

// WithCategoryAPIErrorHandler inject ErrorHandler into controller
func WithCategoryAPIErrorHandler(h ErrorHandler) CategoryAPIOption {
	return func(c *CategoryAPIController) {
		c.errorHandler = h
	}
}

// NewCategoryAPIController creates a default api controller
func NewCategoryAPIController(s CategoryAPIServicer, opts ...CategoryAPIOption) Router {
	controller := &CategoryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CategoryAPIController
func (c *CategoryAPIController) Routes() Routes {
	return Routes{
		"CreateCategories": Route{
			strings.ToUpper("Post"),
			"/api/categories",
			c.CreateCategories,
		},
		"GetCategories": Route{
			strings.ToUpper("Get"),
			"/api/categories",
			c.GetCategories,
		},
	}
}

// CreateCategories - 
func (c *CategoryAPIController) CreateCategories(w http.ResponseWriter, r *http.Request) {
	categoryParam := Category{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&categoryParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCategoryRequired(categoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCategoryConstraints(categoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCategories(r.Context(), categoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCategories - 
func (c *CategoryAPIController) GetCategories(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCategories(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
