/*
 * Coding helper spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package codehelp_core_api


import (
	"fmt"
)



type Difficulty string

// List of Difficulty
const (
	EASY Difficulty = "EASY"
	MEDIUM Difficulty = "MEDIUM"
	HARD Difficulty = "HARD"
)

// AllowedDifficultyEnumValues is all the allowed values of Difficulty enum
var AllowedDifficultyEnumValues = []Difficulty{
	"EASY",
	"MEDIUM",
	"HARD",
}

// validDifficultyEnumValue provides a map of Difficultys for fast verification of use input
var validDifficultyEnumValues = map[Difficulty]struct{}{
	"EASY": {},
	"MEDIUM": {},
	"HARD": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Difficulty) IsValid() bool {
	_, ok := validDifficultyEnumValues[v]
	return ok
}

// NewDifficultyFromValue returns a pointer to a valid Difficulty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDifficultyFromValue(v string) (Difficulty, error) {
	ev := Difficulty(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Difficulty: valid values are %v", v, AllowedDifficultyEnumValues)
	}
}



// AssertDifficultyRequired checks if the required fields are not zero-ed
func AssertDifficultyRequired(obj Difficulty) error {
	return nil
}

// AssertDifficultyConstraints checks if the values respects the defined constraints
func AssertDifficultyConstraints(obj Difficulty) error {
	return nil
}
