openapi: 3.0.1
info:
  title: Coding helper spec
  version: 1.0.0
servers:
- description: Open API specification
  url: http://localhost:3000/api
security:
- Authorization_JWT: []
paths:
  /problems:
    get:
      description: Returns all coding helper problems
      operationId: getProblemEntries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemsResponse'
          description: A list of problems
      tags:
      - Problem
  /problems/liked:
    get:
      description: Return all problems the user likes
      operationId: getLikedProblems
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemsResponse'
          description: A list of liked problems
      tags:
      - Problem
  /problems/top10:
    get:
      description: Returns the top 10 coding helper problems by likes count
      operationId: getTop10Problems
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemsTop10Response'
          description: problem
      tags:
      - Problem
  /problems/create:
    post:
      description: Creates a coding helper problem entry
      operationId: createProblemEntry
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProblemReqBody'
      responses:
        "204":
          description: void
      tags:
      - Problem
  /problems/{id}:
    delete:
      description: Deletes a coding helper problem entry
      operationId: deleteProblemEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: void
      tags:
      - Problem
    get:
      description: Returns a coding helper problem with likes count
      operationId: getProblemEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemByLikes'
          description: problem
      tags:
      - Problem
    put:
      description: Edits a coding helper problem entry
      operationId: editProblemEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProblemReqBody'
      responses:
        "204":
          description: void
      tags:
      - Problem
  /problems/{id}/like:
    get:
      description: Toggles like of a coding helper problem
      operationId: toggleLikeProblemEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: void
      tags:
      - Problem
  /problems/{id}/is-liked:
    get:
      description: Returns true if a coding helper problem is liked
      operationId: isProblemEntryLiked
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example: true
                type: boolean
          description: Returns boolean
      tags:
      - Problem
  /categories:
    get:
      description: Returns all the categories
      operationId: getCategories
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
          description: List of categories
      tags:
      - Category
    post:
      description: Creates a category
      operationId: createCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        "204":
          description: No content
      tags:
      - Category
  /submissions:
    post:
      description: Returns all submissions for the logged user
      operationId: getSubmissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getSubmissions_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionsResponse'
          description: List of Submissions
      tags:
      - Submission
  /submit:
    post:
      description: Returns output string of the code that was run
      operationId: createSubmissionsEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionReqBody'
      responses:
        "204":
          content:
            text/plain:
              schema:
                example: All test cases passed
                type: string
          description: Output string
      tags:
      - Submission
  /contests:
    get:
      description: Returns the contests happening in coding helper
      operationId: getContestEntries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestsResponse'
          description: A list of contests
      tags:
      - Contest
    post:
      description: Creates a contest
      operationId: createContestEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestBaseEntry'
      responses:
        "204":
          description: No content
      tags:
      - Contest
  /contests/{id}:
    delete:
      description: Deletes contest happening in coding helper
      operationId: deleteContestEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: No content
      tags:
      - Contest
    get:
      description: Returns contest happening in coding helper
      operationId: getContestEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestEntry'
          description: A list of contests
      tags:
      - Contest
    post:
      description: Creates contest problem entry for a contest
      operationId: createContestProblemEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProblemReqBody'
      responses:
        "204":
          description: No content
      tags:
      - Contest
    put:
      description: Modifies contest happening in coding helper
      operationId: editContestEntry
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestBaseEntry'
      responses:
        "204":
          description: No content
      tags:
      - Contest
  /contest/{id}/start:
    get:
      description: Starts contest happening in coding helper
      operationId: startContest
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: No content
      tags:
      - Contest
  /contest/{id}/close:
    get:
      description: Closes contest happening in coding helper
      operationId: closeContest
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: No content
      tags:
      - Contest
  /contest/{contestId}/problems/{problemId}:
    delete:
      description: Returns a contest problem entry
      operationId: deleteContestProblem
      parameters:
      - explode: false
        in: path
        name: contestId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      - explode: false
        in: path
        name: problemId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "204":
          description: No content
      tags:
      - Contest
    get:
      description: Returns a contest problem entry
      operationId: getContestProblem
      parameters:
      - explode: false
        in: path
        name: contestId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      - explode: false
        in: path
        name: problemId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestProblem'
          description: Contest problem entry
      tags:
      - Contest
  /contest/{contestId}/problems/{problemId}/set-score:
    post:
      description: Sets the score of a contest problem entry
      operationId: setContestProblemScore
      parameters:
      - explode: false
        in: path
        name: contestId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      - explode: false
        in: path
        name: problemId
        required: true
        schema:
          $ref: '#/components/schemas/Id'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setContestProblemScore_request'
      responses:
        "204":
          description: No content
      tags:
      - Contest
  /run-code:
    post:
      description: Runs code and produces output
      operationId: runCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/runCode_request'
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: "[1, 2, 3]"
                type: string
          description: Output string
      tags:
      - CodeRunner
  /statistics:
    get:
      description: Returns problem solving statistics for user
      operationId: getStatistics
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatistics'
          description: Output string
      tags:
      - User
components:
  parameters:
    id:
      explode: false
      in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/Id'
      style: simple
  schemas:
    Id:
      example: 23
      format: long
      type: integer
    Difficulty:
      enum:
      - EASY
      - MEDIUM
      - HARD
      example: EASY
      type: string
    Gender:
      enum:
      - MALE
      - FEMALE
      - OTHER
      example: MALE
      type: string
    File:
      format: binary
      type: string
    Date:
      example: 2022-05-16
      format: date
      type: string
    Category:
      example:
        name: Binary trees
      properties:
        name:
          example: Binary trees
          type: string
      type: object
    ProblemBaseEntry:
      properties:
        category:
          $ref: '#/components/schemas/Category'
        title:
          example: Two sum
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        markdown:
          example: '## Two Sum... problem description'
          type: string
      required:
      - difficulty
      - title
      type: object
    ProblemEntry:
      allOf:
      - $ref: '#/components/schemas/ProblemBaseEntry'
      - properties:
          id:
            $ref: '#/components/schemas/Id'
          starterCode:
            example: "function(...) {...}"
            type: string
        required:
        - starterCode
        type: object
      example:
        difficulty: EASY
        starterCode: "function(...) {...}"
        markdown: '## Two Sum... problem description'
        id: 23
        category:
          name: Binary trees
        title: Two sum
    ProblemByLikes:
      allOf:
      - $ref: '#/components/schemas/ProblemEntry'
      - properties:
          likes:
            example: 23
            format: long
            type: integer
        required:
        - likes
        type: object
      example:
        likes: 23
    ProblemReqBody:
      allOf:
      - $ref: '#/components/schemas/ProblemBaseEntry'
      - properties:
          starterCode:
            $ref: '#/components/schemas/File'
          runnerCode:
            $ref: '#/components/schemas/File'
          testCases:
            items:
              $ref: '#/components/schemas/File'
            type: array
        required:
        - runnerCode
        - starterCode
        - testCases
        type: object
    ProblemRequest:
      allOf:
      - $ref: '#/components/schemas/ProblemBaseEntry'
      - properties:
          starterCode:
            $ref: '#/components/schemas/File'
          runnerCode:
            $ref: '#/components/schemas/File'
          testCases:
            items:
              $ref: '#/components/schemas/File'
            type: array
        required:
        - runnerCode
        - starterCode
        - testCases
        type: object
      type: object
    SubmissionStatus:
      enum:
      - ACCEPTED
      - DECLINED
      type: string
    SubmissionBaseEntry:
      properties:
        language:
          example: javascript
          type: string
        code:
          example: "function(...) {...}"
          type: string
      required:
      - code
      - language
      type: object
    SubmissionEntry:
      allOf:
      - $ref: '#/components/schemas/SubmissionBaseEntry'
      - properties:
          id:
            $ref: '#/components/schemas/Id'
          timeSubmitted:
            $ref: '#/components/schemas/Date'
          status:
            $ref: '#/components/schemas/SubmissionStatus'
        required:
        - status
        - timeSubmitted
        type: object
      example:
        code: "function(...) {...}"
        language: javascript
        id: 23
        timeSubmitted: 2022-05-16T00:00:00.000+00:00
        status: null
    SubmissionReqBody:
      allOf:
      - $ref: '#/components/schemas/SubmissionBaseEntry'
      - properties:
          problemId:
            $ref: '#/components/schemas/Id'
        required:
        - problemId
        type: object
      example:
        code: "function(...) {...}"
        language: javascript
        problemId: 23
      type: object
    SubmissionRequest:
      allOf:
      - $ref: '#/components/schemas/SubmissionReqBody'
    ContestStatus:
      enum:
      - OPEN
      - STARTED
      - CLOSED
      type: string
    ContestProblem:
      example:
        score: 53
        problem:
          difficulty: EASY
          starterCode: "function(...) {...}"
          markdown: '## Two Sum... problem description'
          id: 23
          category:
            name: Binary trees
          title: Two sum
        id: 23
      properties:
        id:
          example: 23
          format: long
          type: integer
        problem:
          $ref: '#/components/schemas/ProblemEntry'
        score:
          example: 53
          format: long
          type: integer
      required:
      - problem
      - score
      type: object
    ContestBaseEntry:
      example:
        duration: 1h30m
        name: Bitweekly 122 contest
        startsOn: 2022-05-16
      properties:
        name:
          example: Bitweekly 122 contest
          type: string
        duration:
          example: 1h30m
          format: duration
          type: string
        startsOn:
          example: 2022-05-16
          format: date
          type: string
      required:
      - duration
      - name
      - startsOn
      type: object
    ContestEntry:
      allOf:
      - $ref: '#/components/schemas/ContestBaseEntry'
      - properties:
          id:
            $ref: '#/components/schemas/Id'
          status:
            $ref: '#/components/schemas/ContestStatus'
          problems:
            items:
              $ref: '#/components/schemas/ContestProblem'
            type: array
        required:
        - problems
        type: object
      example:
        duration: 1h30m
        name: Bitweekly 122 contest
        id: 23
        startsOn: 2022-05-16
        status: null
        problems:
        - score: 53
          problem:
            difficulty: EASY
            starterCode: "function(...) {...}"
            markdown: '## Two Sum... problem description'
            id: 23
            category:
              name: Binary trees
            title: Two sum
          id: 23
        - score: 53
          problem:
            difficulty: EASY
            starterCode: "function(...) {...}"
            markdown: '## Two Sum... problem description'
            id: 23
            category:
              name: Binary trees
            title: Two sum
          id: 23
      type: object
    ProblemsResponse:
      example:
        problems:
        - difficulty: EASY
          starterCode: "function(...) {...}"
          markdown: '## Two Sum... problem description'
          id: 23
          category:
            name: Binary trees
          title: Two sum
        - difficulty: EASY
          starterCode: "function(...) {...}"
          markdown: '## Two Sum... problem description'
          id: 23
          category:
            name: Binary trees
          title: Two sum
      properties:
        problems:
          items:
            $ref: '#/components/schemas/ProblemEntry'
          type: array
      required:
      - problems
      type: object
    ProblemsTop10Response:
      example:
        problems:
        - likes: 23
        - likes: 23
      properties:
        problems:
          items:
            $ref: '#/components/schemas/ProblemByLikes'
          type: array
      required:
      - problems
      type: object
    CategoriesResponse:
      example:
        categories:
        - name: Binary trees
        - name: Binary trees
      properties:
        categories:
          items:
            $ref: '#/components/schemas/Category'
          type: array
      required:
      - categories
      type: object
    SubmissionsResponse:
      example:
        submissions:
        - code: "function(...) {...}"
          language: javascript
          id: 23
          timeSubmitted: 2022-05-16T00:00:00.000+00:00
          status: null
        - code: "function(...) {...}"
          language: javascript
          id: 23
          timeSubmitted: 2022-05-16T00:00:00.000+00:00
          status: null
      properties:
        submissions:
          items:
            $ref: '#/components/schemas/SubmissionEntry'
          type: array
      required:
      - submissions
      type: object
    ContestsResponse:
      example:
        contests:
        - duration: 1h30m
          name: Bitweekly 122 contest
          id: 23
          startsOn: 2022-05-16
          status: null
          problems:
          - score: 53
            problem:
              difficulty: EASY
              starterCode: "function(...) {...}"
              markdown: '## Two Sum... problem description'
              id: 23
              category:
                name: Binary trees
              title: Two sum
            id: 23
          - score: 53
            problem:
              difficulty: EASY
              starterCode: "function(...) {...}"
              markdown: '## Two Sum... problem description'
              id: 23
              category:
                name: Binary trees
              title: Two sum
            id: 23
        - duration: 1h30m
          name: Bitweekly 122 contest
          id: 23
          startsOn: 2022-05-16
          status: null
          problems:
          - score: 53
            problem:
              difficulty: EASY
              starterCode: "function(...) {...}"
              markdown: '## Two Sum... problem description'
              id: 23
              category:
                name: Binary trees
              title: Two sum
            id: 23
          - score: 53
            problem:
              difficulty: EASY
              starterCode: "function(...) {...}"
              markdown: '## Two Sum... problem description'
              id: 23
              category:
                name: Binary trees
              title: Two sum
            id: 23
      properties:
        contests:
          items:
            $ref: '#/components/schemas/ContestEntry'
          type: array
      required:
      - contests
      type: object
    UserStatistics:
      example:
        solved: 5
        medium: 2
        hard: 1
        easy: 2
      properties:
        solved:
          example: 5
          format: long
          type: integer
        easy:
          example: 2
          format: long
          type: integer
        medium:
          example: 2
          format: long
          type: integer
        hard:
          example: 1
          format: long
          type: integer
      required:
      - easy
      - hard
      - medium
      - solved
      type: object
    getSubmissions_request:
      properties:
        problemId:
          example: 23
          format: long
          type: integer
      type: object
    setContestProblemScore_request:
      properties:
        score:
          example: 15
          type: integer
      type: object
    runCode_request:
      properties:
        problemId:
          example: 23
          format: long
          type: integer
        language:
          example: javascript
          type: string
        code:
          example: "function(...) {...)"
          type: string
        input:
          example: "[1, 2]"
          type: string
      type: object
  securitySchemes:
    Authorization_JWT:
      bearerFormat: JWT
      scheme: bearer
      type: http
