/*
 * Forum application
 *
 * Forum application api
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package code_help_forum_api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CommunityAPIController binds http requests to an api service and writes the service results to the http response
type CommunityAPIController struct {
	service CommunityAPIServicer
	errorHandler ErrorHandler
}

// CommunityAPIOption for how the controller is set up.
type CommunityAPIOption func(*CommunityAPIController)

// WithCommunityAPIErrorHandler inject ErrorHandler into controller
func WithCommunityAPIErrorHandler(h ErrorHandler) CommunityAPIOption {
	return func(c *CommunityAPIController) {
		c.errorHandler = h
	}
}

// NewCommunityAPIController creates a default api controller
func NewCommunityAPIController(s CommunityAPIServicer, opts ...CommunityAPIOption) Router {
	controller := &CommunityAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommunityAPIController
func (c *CommunityAPIController) Routes() Routes {
	return Routes{
		"AddANewModeratorToTheCommunity": Route{
			strings.ToUpper("Patch"),
			"/api/v1/community/moderator",
			c.AddANewModeratorToTheCommunity,
		},
		"CreateCommunity": Route{
			strings.ToUpper("Post"),
			"/api/v1/community",
			c.CreateCommunity,
		},
		"DeleteCommunity": Route{
			strings.ToUpper("Delete"),
			"/api/v1/community/{name}",
			c.DeleteCommunity,
		},
		"GetAllCommunities": Route{
			strings.ToUpper("Get"),
			"/api/v1/community",
			c.GetAllCommunities,
		},
		"GetCommunityByUid": Route{
			strings.ToUpper("Get"),
			"/api/v1/community/{name}",
			c.GetCommunityByUid,
		},
		"GetCommunityModerators": Route{
			strings.ToUpper("Get"),
			"/api/v1/community/moderator",
			c.GetCommunityModerators,
		},
		"JoinCommunity": Route{
			strings.ToUpper("Patch"),
			"/api/v1/community/member",
			c.JoinCommunity,
		},
		"LeaveCommunity": Route{
			strings.ToUpper("Delete"),
			"/api/v1/community/member",
			c.LeaveCommunity,
		},
		"RemoveModerator": Route{
			strings.ToUpper("Delete"),
			"/api/v1/community/moderator",
			c.RemoveModerator,
		},
		"UpdateCommunity": Route{
			strings.ToUpper("Put"),
			"/api/v1/community/{name}",
			c.UpdateCommunity,
		},
	}
}

// AddANewModeratorToTheCommunity - 
func (c *CommunityAPIController) AddANewModeratorToTheCommunity(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var communityParam string
	if query.Has("community") {
		param := query.Get("community")

		communityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "community"}, nil)
		return
	}
	moderatorRequestParam := ModeratorRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&moderatorRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertModeratorRequestRequired(moderatorRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertModeratorRequestConstraints(moderatorRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddANewModeratorToTheCommunity(r.Context(), communityParam, moderatorRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateCommunity - 
func (c *CommunityAPIController) CreateCommunity(w http.ResponseWriter, r *http.Request) {
	communityRequestParam := CommunityRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&communityRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommunityRequestRequired(communityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommunityRequestConstraints(communityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCommunity(r.Context(), communityRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCommunity - 
func (c *CommunityAPIController) DeleteCommunity(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.DeleteCommunity(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllCommunities - 
func (c *CommunityAPIController) GetAllCommunities(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllCommunities(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCommunityByUid - 
func (c *CommunityAPIController) GetCommunityByUid(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetCommunityByUid(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCommunityModerators - 
func (c *CommunityAPIController) GetCommunityModerators(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	result, err := c.service.GetCommunityModerators(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JoinCommunity - 
func (c *CommunityAPIController) JoinCommunity(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var communityParam string
	if query.Has("community") {
		param := query.Get("community")

		communityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "community"}, nil)
		return
	}
	result, err := c.service.JoinCommunity(r.Context(), communityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaveCommunity - 
func (c *CommunityAPIController) LeaveCommunity(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var communityParam string
	if query.Has("community") {
		param := query.Get("community")

		communityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "community"}, nil)
		return
	}
	result, err := c.service.LeaveCommunity(r.Context(), communityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveModerator - 
func (c *CommunityAPIController) RemoveModerator(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var communityParam string
	if query.Has("community") {
		param := query.Get("community")

		communityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "community"}, nil)
		return
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "username"}, nil)
		return
	}
	result, err := c.service.RemoveModerator(r.Context(), communityParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCommunity - 
func (c *CommunityAPIController) UpdateCommunity(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	communityRequestParam := CommunityRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&communityRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommunityRequestRequired(communityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommunityRequestConstraints(communityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCommunity(r.Context(), nameParam, communityRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
